{"primaryContentSections":[{"content":[{"inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"text":" ","type":"text"},{"text":"to format it. ","type":"text"},{"inlineContent":[{"text":"Predicates","type":"text"}],"type":"emphasis"},{"text":" are represented by the same ","type":"text"},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" class that"},{"type":"text","text":" "},{"text":"filters results from Core Data or items in an ","type":"text"},{"code":"NSArray","type":"codeVoice"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"text":"Predicates are based on ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"expressions"}]},{"type":"text","text":", represented by the "},{"code":"NSExpression","type":"codeVoice"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"text":"Somewhat unusually, style layers also use expressions on their own.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"type":"text","text":" "},{"type":"text","text":"syntax supported by this SDK. For a more general introduction to predicates and"},{"text":" ","type":"text"},{"type":"text","text":"expressions, consult the"},{"type":"text","text":" "},{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"reference","isActive":true}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"type":"text","text":" "},{"type":"text","text":"extended the "},{"code":"NSExpression","type":"codeVoice"},{"text":" class, see the ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","isActive":true},{"type":"text","text":" header."}],"type":"paragraph"},{"anchor":"Using-predicates-to-filter-vector-data","type":"heading","level":2,"text":"Using predicates to filter vector data"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most style layer classes display "},{"code":"MLNFeature","type":"codeVoice"},{"text":" objects that you can show or hide","type":"text"},{"type":"text","text":" "},{"text":"based on the feature’s attributes. Use the ","type":"text"},{"type":"codeVoice","code":"MLNVectorStyleLayer.predicate"},{"text":" ","type":"text"},{"text":"property to include only the features in the source layer that satisfy a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"condition that you define."}]},{"anchor":"Operators","type":"heading","level":3,"text":"Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key = value","type":"codeVoice"},{"type":"codeVoice","code":"key == value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanOrEqualToPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key >= value"},{"type":"codeVoice","code":"key => value"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"code":"key <= value","type":"codeVoice"},{"type":"codeVoice","code":"key =< value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"key > value","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key < value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"key != value","type":"codeVoice"},{"code":"key <> value","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}]}]]]},{"type":"paragraph","inlineContent":[{"text":"To test whether a feature has or lacks a specific attribute, compare the","type":"text"},{"type":"text","text":" "},{"text":"attribute to ","type":"text"},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" or "},{"code":"NIL","type":"codeVoice"},{"text":". Predicates created using the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"text":" method are also supported. String","type":"text"},{"text":" ","type":"text"},{"text":"operators and custom operators are not supported.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following compound operators are supported:","type":"text"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCompoundPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"code":"predicate1 && predicate2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSOrPredicateType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"text":"predicate1 || predicate2","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotPredicateType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"type":"codeVoice","code":"!predicate"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSInPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key","type":"codeVoice"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"IN"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CONTAINS"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"type":"codeVoice","code":"SELF"},{"text":") lies within a given ","type":"text"},{"type":"codeVoice","code":"MLNShape"},{"text":" or ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:","type":"text"}]},{"type":"codeListing","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"syntax":"objc"},{"code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"code":"NSComparisonPredicateModifier","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]],"header":"row","type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison predicate options are supported for comparison and"},{"text":" ","type":"text"},{"type":"text","text":"aggregate operators that are used in the predicate:"}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"code":"NSComparisonPredicateOptions","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCaseInsensitivePredicateOption"}]}],[{"type":"paragraph","inlineContent":[{"code":"'QUEBEC' =[c] 'Quebec'","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}],"type":"paragraph"}],[{"inlineContent":[{"code":"'Québec' =[d] 'Quebec'","type":"codeVoice"}],"type":"paragraph"}]]]},{"inlineContent":[{"type":"text","text":"Other comparison predicate options are unsupported, namely "},{"code":"l","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"(for locale sensitivity) and "},{"type":"codeVoice","code":"n"},{"type":"text","text":" (for normalization). A comparison is"},{"text":" ","type":"text"},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"text":" ","type":"text"},{"text":"predicate options are not supported in conjunction with comparison modifiers","type":"text"},{"type":"text","text":" "},{"text":"like ","type":"text"},{"type":"codeVoice","code":"ALL"},{"text":" and ","type":"text"},{"code":"ANY","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"Operands","text":"Operands","type":"heading"},{"inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"isActive":true,"type":"reference","identifier":"#variables"},{"text":", ","type":"text"},{"type":"reference","identifier":"#key-paths","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or almost anything else that can appear"},{"text":" ","type":"text"},{"type":"reference","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Automatic type casting is not performed. Therefore, a feature only matches a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate if its value for the attribute in question is of the same type as the"},{"type":"text","text":" "},{"type":"text","text":"value specified in the predicate. Use the "},{"type":"codeVoice","code":"CAST()"},{"text":" operator to convert a key","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"path or variable into a matching type:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a number, use "},{"type":"codeVoice","code":"CAST(key, 'NSNumber')"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To cast a value to a string, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a color, use ","type":"text"},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"code":"CAST(key, 'NSColor')","type":"codeVoice"},{"text":" on macOS.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast an ","type":"text"},{"type":"codeVoice","code":"NSColor"},{"text":" or ","type":"text"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" object to an array, use "},{"type":"codeVoice","code":"CAST(noindex(color), 'NSArray')"},{"text":".","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"For details about the predicate format string syntax, consult the “Predicate","type":"text"},{"type":"text","text":" "},{"text":"Format String Syntax” chapter of the","type":"text"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","overridingTitleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"isActive":true,"overridingTitle":"Predicate Programming Guide"}]},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation."}]},{"text":"Using expressions to configure layout and paint attributes","anchor":"Using-expressions-to-configure-layout-and-paint-attributes","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"An expression can contain subexpressions of various types. Each of the supported","type":"text"},{"type":"text","text":" "},{"text":"types of expressions is discussed below.","type":"text"}]},{"level":3,"anchor":"Constant-values","text":"Constant values","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"In Objective-C","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"In Swift","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"inlineContent":[{"code":"String","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"String"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[Float]"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"[String]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"code":"CGVector","type":"codeVoice"},{"type":"text","text":" (macOS)"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue","type":"codeVoice"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSValue.UIEdgeInsetsValue","type":"codeVoice"},{"text":" (iOS)","type":"text"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSValue.uiEdgeInsetsValue","type":"codeVoice"},{"text":" (iOS)","type":"text"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For literal floating-point values, use "},{"type":"codeVoice","code":"-[NSNumber numberWithDouble:]"},{"type":"text","text":" instead"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"-[NSNumber numberWithFloat:]","type":"codeVoice"},{"type":"text","text":" to avoid precision issues."}]},{"anchor":"Key-paths","text":"Key paths","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":" object being"},{"type":"text","text":" "},{"type":"text","text":"evaluated for display. For example, if a polygon’s "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":" ","type":"text"},{"type":"text","text":"dictionary contains the "},{"code":"floorCount","type":"codeVoice"},{"text":" key, then the key path ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"text":" refers","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the value of the "},{"code":"floorCount","type":"codeVoice"},{"text":" attribute when evaluating that particular","type":"text"},{"type":"text","text":" "},{"text":"polygon.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following special attributes are also available on features that are produced","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a result of clustering multiple point features together in a shape source:"}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Attribute"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Meaning","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool"}]}],[{"inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster_id"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"text":"Identifier for the point cluster.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"point_count"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}],"type":"paragraph"}]]]},{"inlineContent":[{"text":"Some characters may not be used directly as part of a key path in a format","type":"text"},{"type":"text","text":" "},{"text":"string. For example, if a feature’s attribute is named ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"text":", an","type":"text"},{"type":"text","text":" "},{"text":"expression format string of ","type":"text"},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"type":"text","text":" or a predicate format"},{"type":"text","text":" "},{"type":"text","text":"string of "},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"type":"text","text":" would raise an exception. Instead, use a"},{"type":"text","text":" "},{"type":"codeVoice","code":"%K"},{"type":"text","text":" placeholder or the "},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"text":" initializer:","type":"text"}],"type":"paragraph"},{"syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"],"type":"codeListing"},{"type":"codeListing","syntax":"swift","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"]},{"text":"Functions","type":"heading","anchor":"Functions","level":3},{"inlineContent":[{"text":"Of the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"by the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the following subset is supported in layer attribute values:","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"average:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"sum:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"count:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"min:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"min({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"add:to:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"1 + 2"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"from:subtract:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"2 - 1","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"multiply:by:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 * 2"}]}]],[[{"inlineContent":[{"code":"divide:by:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"1 \/ 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"modulus:by:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"modulus:by:(1, 2)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"sqrt:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"log:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"log(10)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"ln:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln(2)"}]}]],[[{"inlineContent":[{"code":"raise:toPower:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"2 ** 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"exp:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"exp(0)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling:"}]}],[{"inlineContent":[{"code":"ceiling(0.99999)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"abs(-1)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"trunc:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc(6378.1370)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"floor:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"uppercase:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"uppercase('Elysian Fields')"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase('DOWNTOWN')"}]}]],[[{"inlineContent":[{"code":"noindex:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex(0 + 2 + c)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"length:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"length('Wapakoneta')","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"castObject:toType:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"type":"codeVoice","code":"CAST(ele, 'NSNumber')"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A number of "},{"isActive":true,"type":"reference","identifier":"#MapLibre-specific-functions"},{"type":"text","text":" are also"},{"text":" ","type":"text"},{"type":"text","text":"available."}]},{"inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"type":"text","text":" supported:"}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"text":"Initializer parameter","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"median:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode:"}]}],[{"inlineContent":[{"code":"mode({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"stddev:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"stddev({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random()"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"randomn:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn(10)"}]}]],[[{"inlineContent":[{"code":"now","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"now()","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"bitwiseAnd:with:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseOr:with:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"leftshift:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:(23, 1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"onesComplement:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"onesComplement(255)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}]}]]],"type":"table"},{"text":"Conditionals","type":"heading","anchor":"Conditionals","level":3},{"type":"paragraph","inlineContent":[{"text":"Conditionals are supported via the built-in","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and "},{"code":"TERNARY()","type":"codeVoice"},{"text":" operator. If you need to express multiple cases","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"type":"text","text":" "},{"identifier":"#code-mgl_if-code","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"#code-mgl_match-code","type":"reference","isActive":true},{"type":"text","text":" function."}]},{"level":3,"type":"heading","anchor":"Aggregates","text":"Aggregates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aggregate expressions can contain arrays of expressions. In some cases, it is"},{"text":" ","type":"text"},{"type":"text","text":"possible to use the array itself instead of wrapping the array in an aggregate"},{"type":"text","text":" "},{"text":"expression.","type":"text"}]},{"level":3,"text":"Variables","anchor":"Variables","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The following variables are defined by this SDK for use with style layers:","type":"text"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Variable","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Meaning"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any GeoJSON data type"}]}],[{"type":"paragraph","inlineContent":[{"text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the ","type":"text"},{"code":"NSExpression.featureIdentifierVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$geometryType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}],[{"type":"paragraph","inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"Point"},{"type":"text","text":" for point features, corresponding to the "},{"code":"MLNPointAnnotation","type":"codeVoice"},{"text":" class","type":"text"},{"text":"*   ","type":"text"},{"code":"LineString","type":"codeVoice"},{"type":"text","text":" for polyline features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference","isActive":true},{"type":"text","text":" class"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Polygon"},{"type":"text","text":" for polygon features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true,"type":"reference"},{"text":" class","type":"text"},{"type":"text","text":"This variable corresponds to the "},{"code":"NSExpression.geometryTypeVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$heatmapDensity"}]}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","isActive":true},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"type":"codeVoice","code":"heatmapColor"},{"text":" property. This variable corresponds to the ","type":"text"},{"code":"NSExpression.heatmapDensityVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"code":"$zoomLevel","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"$lineProgress","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient"},{"type":"text","text":" property. It corresponds to the "},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"text":" property.","type":"text"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"type":"text","text":" "},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"identifier":"#MapLibre-specific-functions","type":"reference","overridingTitle":"MapLibre-specific function","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"MapLibre-specific function"}]},{"type":"text","text":" that takes an"},{"type":"text","text":" "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" as an argument:"}]},{"code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"type":"codeListing","syntax":"objc"},{"type":"codeListing","syntax":"swift","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"]},{"level":2,"type":"heading","anchor":"MapLibre-specific-functions","text":"MapLibre-specific functions"},{"style":"warning","name":"Warning","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","type":"reference","isActive":true},{"text":" for more information and workarounds.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compatibility with the MapLibre Style Spec, the following functions"},{"text":" ","type":"text"},{"text":"are defined by this SDK. When setting a style layer property, you can call these","type":"text"},{"type":"text","text":" "},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method or a convenient format"},{"type":"text","text":" "},{"text":"string syntax:","type":"text"}]},{"level":3,"anchor":"mgldoeshave","type":"heading","text":"mgl_does:have:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"type":"text","text":" or "},{"code":"mgl_does:have:(%@, '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"text":" ","type":"text"},{"type":"text","text":"key or whether the evaluated object ("},{"code":"SELF","type":"codeVoice"},{"text":") has a value for the feature","type":"text"},{"type":"text","text":" "},{"type":"text","text":"attribute. Compared to the "},{"identifier":"#code-mgl_has-code","type":"reference","isActive":true},{"type":"text","text":" custom function,"},{"text":" ","type":"text"},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"text":" ","type":"text"},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"type":"codeVoice","code":"key != NIL"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"code":"%@[key] != NIL","type":"codeVoice"},{"text":" but can be used outside of a predicate.","type":"text"}]},{"anchor":"mglinterpolatewithCurveTypeparametersstops","text":"mgl_interpolate:withCurveType:parameters:stops:","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}]},{"inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"text":" ","type":"text"},{"type":"text","text":"output values (“stops”). Compared to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"text":" ","type":"text"},{"type":"text","text":"in as the first argument to this function."}],"type":"paragraph"},{"level":3,"anchor":"mglstepfromstops","type":"heading","text":"mgl_step:from:stops:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_step:from:stops:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_step:from:stops:(x, 11, %@)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"type":"text","text":" "},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_stepwithminimum-stops-code"},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the first argument to this function."}]},{"level":3,"anchor":"mgljoin","text":"mgl_join:","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_join:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_join({'Old', 'MacDonald'})"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"type":"text","text":" "},{"type":"text","text":"order. Compared to the"},{"text":" ","type":"text"},{"identifier":"#code-stringbyappendingstring-code","type":"reference","isActive":true},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"text":"function, this function takes only one argument, which is an aggregate","type":"text"},{"type":"text","text":" "},{"text":"expression containing the strings to concatenate.","type":"text"}]},{"type":"heading","level":3,"text":"mgl_acos:","anchor":"mglacos"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_acos:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos(1)"}]},{"inlineContent":[{"text":"Returns the arccosine of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","level":3,"text":"mgl_asin:","anchor":"mglasin"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_asin(0)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"mglatan","text":"mgl_atan:","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_atan:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan(20)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arctangent of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"type":"heading","text":"mgl_cos:","anchor":"mglcos","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos(0)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the cosine of the number.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"mgl_log2:","type":"heading","level":3,"anchor":"mgllog2"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_log2:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_log2(1024)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the base-2 logarithm of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_round:","type":"heading","level":3,"anchor":"mglround"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_round(1.5)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the number rounded to the nearest integer. If the number is halfway"},{"type":"text","text":" "},{"text":"between two integers, this function rounds it away from zero.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"mgl_sin:","type":"heading","level":3,"anchor":"mglsin"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the sine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"anchor":"mgltan","type":"heading","text":"mgl_tan:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_tan(0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the tangent of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_distanceFrom:","type":"heading","anchor":"mgldistanceFrom","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"MLNShape"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the straight-line distance from the evaluated object to the given shape."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"mglcoalesce","level":3,"text":"mgl_coalesce:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_coalesce({x, y, z})","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the first non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value from an array of expressions."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_attributed:","anchor":"mglattributed","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_attributed:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_attributed({x, y, z})","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"code":"MLNAttributedExpression","type":"codeVoice"},{"type":"text","text":" objects, for use"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"code":"MLNSymbolStyleLayer.text","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"code":"MLNAttributedExpression.attributes","type":"codeVoice"},{"type":"text","text":" valid attributes."}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Value Type"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontNamesAttribute"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" array."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"NSNumber","type":"codeVoice"},{"text":" value.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontColorAttribute"}]}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS) or ","type":"text"},{"code":"NSColor","type":"codeVoice"},{"text":" (macOS).","type":"text"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"MLN_LET","anchor":"MLNLET"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" Any number of variable names interspersed with their assigned","type":"text"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" values, followed by an ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" "},{"type":"text","text":"that may contain references to those variables."}]},{"inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"type":"text","text":" "},{"text":"Compared to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_expressionwithcontext-code"},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression that contains references to those variables."}],"type":"paragraph"},{"anchor":"MLNMATCH","text":"MLN_MATCH","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_MATCH:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An input expression, then any number of argument pairs, followed by a default"},{"text":" ","type":"text"},{"text":"expression. Each argument pair consists of a constant value followed by an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"text":" ","type":"text"},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"text":" ","type":"text"},{"text":"that aggregate expression result in the following argument. This is shorthand for","type":"text"},{"text":" ","type":"text"},{"text":"specifying an argument pair for each of the constant values within that aggregate","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}]},{"inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","anchor":"MLNIF","text":"MLN_IF"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_IF:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Alternating "},{"type":"codeVoice","code":"NSPredicate"},{"text":" conditionals and resulting expressions,","type":"text"},{"type":"text","text":" "},{"text":"followed by a default expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"text":" ","type":"text"},{"type":"text","text":"value. Unlike"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"text":" or","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"type":"text","text":" "},{"type":"text","text":"and is supported on iOS 8."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"type":"text","text":"; however, each conditional"},{"text":" ","type":"text"},{"text":"passed into this function must be wrapped in a constant expression.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"MLN_FUNCTION","anchor":"MLNFUNCTION","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION('typeof', mystery)"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Any arguments required by the expression operator."}],"type":"paragraph"},{"inlineContent":[{"text":"An expression exactly as defined by the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Custom-functions","level":2,"text":"Custom functions","type":"heading"},{"inlineContent":[{"text":"The following custom functions are also available with the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"text":" method or the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"text":" format string syntax.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Some of these functions are defined as methods on their respective target","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"text":" ","type":"text"},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"text":" ","type":"text"},{"type":"text","text":"or may result in undefined behavior."}]},{"type":"paragraph","inlineContent":[{"text":"The MapLibre Style Spec defines some operators for which no custom","type":"text"},{"type":"text","text":" "},{"text":"function is available. To use these operators in an ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":", call the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_function-code","type":"reference","isActive":true},{"text":" function with the same arguments","type":"text"},{"text":" ","type":"text"},{"text":"that the operator expects.","type":"text"}]},{"type":"heading","level":3,"text":"boolValue","anchor":"boolValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"boolValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"FUNCTION(1, 'boolValue')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a number or string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" None."}]},{"inlineContent":[{"text":"A Boolean representation of the target: ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":" when then input is an"},{"type":"text","text":" "},{"type":"text","text":"empty string, 0, "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", or "},{"type":"codeVoice","code":"NaN"},{"type":"text","text":", otherwise "},{"code":"TRUE","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"mglhas","type":"heading","text":"mgl_has:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_has:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSDictionary"},{"text":" ","type":"text"},{"text":"or the evaluated object (","type":"text"},{"code":"SELF","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to an ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"text":" ","type":"text"},{"type":"text","text":"look up in the evaluated object (see "},{"code":"MLNFeature.attributes","type":"codeVoice"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"true"},{"type":"text","text":" if the dictionary has a value for the key or if the evaluated"},{"text":" ","type":"text"},{"type":"text","text":"object has a value for the feature attribute."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_does-have-code","type":"reference","isActive":true},{"type":"text","text":" function, which is used on its own"},{"type":"text","text":" "},{"text":"without the ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator. You can also check whether an object has an"},{"text":" ","type":"text"},{"type":"text","text":"attribute by comparing the key path to "},{"code":"NIL","type":"codeVoice"},{"text":", for example ","type":"text"},{"type":"codeVoice","code":"cheeseburger != NIL"},{"type":"text","text":" "},{"type":"text","text":"or "},{"code":"burger.cheese != NIL","type":"codeVoice"}]},{"anchor":"mglexpressionWithContext","text":"mgl_expressionWithContext:","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)","type":"codeVoice"},{"text":" with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a dictionary containing "},{"type":"codeVoice","code":"ios"},{"text":" and ","type":"text"},{"code":"macos","type":"codeVoice"},{"type":"text","text":" keys"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that may contain references to the variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" with "},{"type":"codeVoice","code":"NSString"},{"text":"s as keys and","type":"text"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"type":"text","text":" "},{"text":"value is the variable’s value within the target expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"text":" ","type":"text"},{"text":"defined in the context dictionary.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_let-code","isActive":true},{"type":"text","text":" function, which is used on its own without the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}],"type":"paragraph"},{"text":"mgl_interpolateWithCurveType:parameters:stops:","type":"heading","anchor":"mglinterpolateWithCurveTypeparametersstops","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"with a dictionary containing zoom levels or other constant values as keys"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number and contains a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable or key path expression."}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"type":"text","text":" "},{"code":"linear","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", or "},{"code":"cubic-bezier","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The second argument is an expression providing parameters for the curve:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"linear","type":"codeVoice"},{"text":", the argument is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"text":"expression that evaluates to a number, specifying the base of the","type":"text"},{"type":"text","text":" "},{"text":"exponential interpolation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"cubic-bezier"},{"text":", the argument is an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"type":"text","text":" "},{"text":"evaluating to a number. The four numbers are control points for the","type":"text"},{"type":"text","text":" "},{"text":"cubic Bézier curve.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The third argument is an "},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"text":" ","type":"text"},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A value interpolated along the continuous mathematical function defined by the"},{"type":"text","text":" "},{"text":"arguments, with the target as the input to the function.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"text":" ","type":"text"},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},{"text":" ","type":"text"},{"text":"function, which is used on its own without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator.","type":"text"}]},{"text":"mgl_numberWithFallbackValues:","anchor":"mglnumberWithFallbackValues","level":3,"type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"doubleValue","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Zero or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or string."}]},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", the result is 0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"doubleValue","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"floatValue"},{"text":", or","type":"text"},{"text":" ","type":"text"},{"code":"decimalValue","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"text":"Zero or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A numeric representation of the target:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"code":"FALSE","type":"codeVoice"},{"text":", the result is 0.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"type":"text","text":" "},{"text":"“","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true,"type":"reference"},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"type":"text","text":" "},{"text":"first successful conversion is obtained.","type":"text"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"type":"text","text":" "},{"text":"number by passing the value and the string ","type":"text"},{"type":"codeVoice","code":"NSNumber"},{"text":" into the ","type":"text"},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"operator."}]},{"anchor":"mglstepWithMinimumstops","level":3,"text":"mgl_stepWithMinimum:stops:","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)","type":"codeVoice"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" ","type":"text"},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number and contains a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" ","type":"text"},{"text":"The first argument is an expression that evaluates to a number, specifying","type":"text"},{"text":" ","type":"text"},{"text":"the minimum value in case the target is less than any of the stops in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"second argument."}]},{"type":"paragraph","inlineContent":[{"text":"The second argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"type":"text","text":" "},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"type":"text","text":" "},{"text":"values.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"type":"text","text":" "},{"type":"text","text":"or the minimum value if the target is less than the least of the stops’ keys."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"text":" objects. For example, you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"text":" ","type":"text"},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"stringByAppendingString:","type":"heading","anchor":"stringByAppendingString","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"stringByAppendingString:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a string.","type":"text"}]},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"text":"One or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The target string with each of the argument strings appended in order.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"type":"text","text":" "},{"text":"method and is similar to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_join-code","type":"reference"},{"type":"text","text":" function, which concatenates multiple"},{"text":" ","type":"text"},{"text":"expressions and is used on its own without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"anchor":"stringValue","text":"stringValue","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"stringValue","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'stringValue')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" ","type":"text"},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"type":"text","text":"string."}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" ","type":"text"},{"text":"None.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A string representation of the target:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"type":"text","text":"NIL"},{"text":", the result is the empty string.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a Boolean value, the result is the string ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"text":" ","type":"text"},{"text":"“","type":"text"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true},{"text":"”","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a color, it is converted to a string of the form","type":"text"},{"text":" ","type":"text"},{"code":"rgba(r,g,b,a)","type":"codeVoice"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"text":", ","type":"text"},{"text":"g","type":"text"},{"text":", and ","type":"text"},{"text":"b","type":"text"},{"text":" are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"type":"text","text":"a"},{"type":"text","text":" ranges from 0 to 1."}]}]},{"content":[{"inlineContent":[{"text":"Otherwise, the target is converted to a string in the format specified by the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},{"type":"text","text":" "},{"text":"function of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string by passing the value and the string "},{"code":"NSString","type":"codeVoice"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}]}],"kind":"content"}],"kind":"article","sections":[],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"seeAlsoSections":[{"title":"Other Articles","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"generated":true}],"metadata":{"modules":[{"name":"MapLibre"}],"title":"Predicates and expressions","roleHeading":"Article","role":"article"},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"abstract":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"NSPredicate"},{"type":"text","text":" with MapLibre iOS"}],"references":{"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"titleInlineContent":[{"code":"format","type":"codeVoice"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","type":"link","title":"format"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"kind":"article","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}],"type":"topic","title":"User Interactions","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"type":"link","title":"asin","titleInlineContent":[{"type":"codeVoice","code":"asin"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","type":"link","title":"JSON.stringify()"},"doc://org.swift.MyProject/documentation/MapLibre":{"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","title":"MapLibre","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"url":"\/documentation\/maplibre"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"kind":"article","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","abstract":[{"text":"Using custom fonts","type":"text"}],"type":"topic","title":"Customizing Fonts","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts"},"#code-mgl_expressionwithcontext-code":{"type":"link","title":"mgl_expressionWithContext:","titleInlineContent":[{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"url":"#code-mgl_expressionwithcontext-code","identifier":"#code-mgl_expressionwithcontext-code"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"titleInlineContent":[{"code":"case","type":"codeVoice"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"link","title":"case"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"type":"link","title":"kernel density estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"#MapLibre-specific-functions":{"titleInlineContent":[{"type":"text","text":"MapLibre-specific functions"}],"identifier":"#MapLibre-specific-functions","url":"#MapLibre-specific-functions","type":"link","title":"MapLibre-specific functions"},"#code-mgl_stepwithminimum-stops-code":{"type":"link","title":"mgl_stepWithMinimum:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"url":"#code-mgl_stepwithminimum-stops-code","identifier":"#code-mgl_stepwithminimum-stops-code"},"#code-mgl_does-have-code":{"titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}],"identifier":"#code-mgl_does-have-code","url":"#code-mgl_does-have-code","type":"link","title":"mgl_does:have:"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"type":"link","title":"log2","titleInlineContent":[{"type":"codeVoice","code":"log2"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"titleInlineContent":[{"type":"text","text":"NumberToString"}],"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","type":"link","title":"NumberToString"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"type":"link","title":"interpolate","titleInlineContent":[{"type":"codeVoice","code":"interpolate"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link","title":"Predicate Programming Guide"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"kind":"article","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","abstract":[],"type":"topic","title":"Information for Style Authors","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors"},"#code-mgl_join-code":{"type":"link","title":"mgl_join:","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"url":"#code-mgl_join-code","identifier":"#code-mgl_join-code"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"titleInlineContent":[{"code":"tan","type":"codeVoice"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"link","title":"tan"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"kind":"article","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","abstract":[{"type":"text","text":"Adding images to the map and assigning them to POI types"}],"type":"topic","title":"Adding Multiple Images","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample"},"#variables":{"type":"link","title":"variables","titleInlineContent":[{"type":"text","text":"variables"}],"url":"#variables","identifier":"#variables"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"title":"MLNPolygon","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","url":"\/documentation\/maplibre\/mlnpolygon","fragments":[{"text":"MLNPolygon","kind":"identifier"}],"abstract":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"text":" ","type":"text"},{"type":"text","text":"vertices, specified as "},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the edges that"},{"text":" ","type":"text"},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"text":" ","type":"text"},{"text":"building, a lake, or an area you want to highlight.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"role":"symbol","title":"MLNShapeSource","abstract":[{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true},{"text":" is a map content source that supplies vector shapes to be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape"},{"type":"text","text":" or "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true,"type":"reference"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"or they may be defined by local or external","type":"text"},{"text":" ","type":"text"},{"text":"GeoJSON","type":"text"},{"type":"text","text":" code. A shape source is added to an"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"type":"text","text":" object along with an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"text":" object. The vector style","type":"text"},{"type":"text","text":" "},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"text":" ","type":"text"},{"text":"can update a shape source by setting its ","type":"text"},{"type":"codeVoice","code":"shape"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URL"},{"text":" property.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","url":"\/documentation\/maplibre\/mlnshapesource","kind":"symbol","fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"type":"topic"},"#code-mgl_match-code":{"titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}],"identifier":"#code-mgl_match-code","url":"#code-mgl_match-code","type":"link","title":"MLN_MATCH()"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"type":"link","title":"acos","titleInlineContent":[{"code":"acos","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"link","title":"mgl_interpolate:withCurveType:parameters:stops:"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"type":"link","title":"+[NSExpression expressionForFunction:arguments:] method","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"titleInlineContent":[{"code":"NSExpression+MLNAdditions.h","type":"codeVoice"}],"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"link","title":"NSExpression+MLNAdditions.h"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"type":"link","title":"mgl_interpolateWithCurveType:parameters:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"role":"symbol","title":"MLNPolyline","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","kind":"symbol","url":"\/documentation\/maplibre\/mlnpolyline","abstract":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference","isActive":true},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"type":"text","text":" "},{"text":"specified as ","type":"text"},{"code":"CLLocationCoordinate2D","type":"codeVoice"},{"type":"text","text":" instances, and the line segments that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"text":" ","type":"text"},{"text":"path along which something moves.","type":"text"}],"fragments":[{"kind":"identifier","text":"MLNPolyline"}],"type":"topic"},"#code-mgl_function-code":{"titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"identifier":"#code-mgl_function-code","url":"#code-mgl_function-code","type":"link","title":"MLN_FUNCTION()"},"#using-expressions-to-configure-layout-and-paint-attributes":{"type":"link","title":"inside an expression","titleInlineContent":[{"type":"text","text":"inside an expression"}],"url":"#using-expressions-to-configure-layout-and-paint-attributes","identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"titleInlineContent":[{"type":"text","text":"functions predefined"}],"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"link","title":"functions predefined"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"type":"link","title":"round","titleInlineContent":[{"type":"codeVoice","code":"round"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"titleInlineContent":[{"code":"step","type":"codeVoice"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","type":"link","title":"step"},"#code-stringbyappendingstring-code":{"type":"link","title":"stringByAppendingString:","titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}],"url":"#code-stringbyappendingstring-code","identifier":"#code-stringbyappendingstring-code"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"titleInlineContent":[{"type":"text","text":"ToNumber Applied to the String Type"}],"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","type":"link","title":"ToNumber Applied to the String Type"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"type":"link","title":"to-number","titleInlineContent":[{"type":"codeVoice","code":"to-number"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"#code-mgl_let-code":{"titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"identifier":"#code-mgl_let-code","url":"#code-mgl_let-code","type":"link","title":"MLN_LET"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"kind":"article","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","abstract":[{"type":"text","text":"Using URL Templates when defining tile sources"}],"type":"topic","title":"Tile URL Templates","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"role":"symbol","kind":"symbol","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","title":"lineGradient","fragments":[{"kind":"identifier","text":"lineGradient"}],"abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"type":"text","text":" "},{"type":"text","text":"effect on lines defined by an "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true},{"type":"text","text":" whose "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"option is set to "},{"type":"codeVoice","code":"YES"},{"text":".","type":"text"}],"type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"type":"link","title":"cos","titleInlineContent":[{"type":"codeVoice","code":"cos"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"titleInlineContent":[{"code":"to-string","type":"codeVoice"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"link","title":"to-string"},"#key-paths":{"type":"link","title":"key paths","titleInlineContent":[{"type":"text","text":"key paths"}],"url":"#key-paths","identifier":"#key-paths"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"titleInlineContent":[{"type":"codeVoice","code":"distance"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","type":"link","title":"distance"},"#code-mgl_if-code":{"type":"link","title":"MLN_IF()","titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"url":"#code-mgl_if-code","identifier":"#code-mgl_if-code"},"#code-mgl_has-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_has:"}],"identifier":"#code-mgl_has-code","url":"#code-mgl_has-code","type":"link","title":"mgl_has:"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"type":"topic","role":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","kind":"article","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"code":"Info.plist","type":"codeVoice"},{"type":"text","text":" keys in your application in order to configure various settings."}],"url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","title":"Info.plist Keys"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"type":"link","title":"atan","titleInlineContent":[{"code":"atan","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"titleInlineContent":[{"type":"codeVoice","code":"has"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"link","title":"has"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"type":"link","title":"sin","titleInlineContent":[{"code":"sin","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"titleInlineContent":[{"type":"codeVoice","code":"match"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"link","title":"match"},"https://github.com/maplibre/maplibre-native/issues/331":{"type":"link","title":"#331","titleInlineContent":[{"type":"text","text":"#331"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"titleInlineContent":[{"type":"codeVoice","code":"coalesce"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","type":"link","title":"coalesce"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"type":"link","title":"let","titleInlineContent":[{"code":"let","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"titleInlineContent":[{"type":"codeVoice","code":"concat"}],"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","type":"link","title":"concat"},"https://maplibre.org/maplibre-style-spec/expressions/":{"type":"link","title":"MapLibre Style Spec","titleInlineContent":[{"type":"text","text":"MapLibre Style Spec"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"}}}