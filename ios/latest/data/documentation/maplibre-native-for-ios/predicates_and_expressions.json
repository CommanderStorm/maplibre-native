{"abstract":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" with MapLibre iOS","type":"text"}],"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"],"traits":[{"interfaceLanguage":"occ"}]}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"text":" ","type":"text"},{"text":"to format it. ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Predicates","type":"text"}]},{"text":" are represented by the same ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" class that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"filters results from Core Data or items in an "},{"code":"NSArray","type":"codeVoice"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"type":"text","text":"Predicates are based on "},{"inlineContent":[{"text":"expressions","type":"text"}],"type":"emphasis"},{"type":"text","text":", represented by the "},{"type":"codeVoice","code":"NSExpression"},{"text":" class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}]},{"inlineContent":[{"text":"This document discusses the specific subset of the predicate and expression","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"syntax supported by this SDK. For a more general introduction to predicates and"},{"text":" ","type":"text"},{"type":"text","text":"expressions, consult the"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true}]},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"text":" ","type":"text"},{"type":"text","text":"extended the "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class, see the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},{"type":"text","text":" header."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Using predicates to filter vector data","anchor":"Using-predicates-to-filter-vector-data"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most style layer classes display "},{"type":"codeVoice","code":"MLNFeature"},{"text":" objects that you can show or hide","type":"text"},{"type":"text","text":" "},{"type":"text","text":"based on the feature’s attributes. Use the "},{"code":"MLNVectorStyleLayer.predicate","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"property to include only the features in the source layer that satisfy a"},{"text":" ","type":"text"},{"text":"condition that you define.","type":"text"}]},{"type":"heading","text":"Operators","level":3,"anchor":"Operators"},{"inlineContent":[{"text":"The following comparison operators are supported:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key = value"},{"type":"codeVoice","code":"key == value"}]}]],[[{"inlineContent":[{"code":"NSGreaterThanOrEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key >= value"},{"code":"key => value","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key <= value"},{"type":"codeVoice","code":"key =< value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key > value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSLessThanPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key < value"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key != value"},{"type":"codeVoice","code":"key <> value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSBetweenPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}]}]]]},{"type":"paragraph","inlineContent":[{"text":"To test whether a feature has or lacks a specific attribute, compare the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"attribute to "},{"type":"codeVoice","code":"NULL"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":". Predicates created using the","type":"text"},{"text":" ","type":"text"},{"code":"+[NSPredicate predicateWithValue:]","type":"codeVoice"},{"text":" method are also supported. String","type":"text"},{"type":"text","text":" "},{"type":"text","text":"operators and custom operators are not supported."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following compound operators are supported:"}]},{"rows":[[[{"inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAndPredicateType"}]}],[{"inlineContent":[{"code":"predicate1 AND predicate2","type":"codeVoice"},{"code":"predicate1 && predicate2","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSOrPredicateType"}]}],[{"inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"type":"text","text":"predicate1 || predicate2"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"code":"!predicate","type":"codeVoice"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following aggregate operators are supported:"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSInPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}]}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"IN"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CONTAINS"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":") lies within a given "},{"type":"codeVoice","code":"MLNShape"},{"text":" or ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"objc","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"]},{"code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The following combinations of comparison operators and modifiers are supported:","type":"text"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAllPredicateModifier","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ANY haystack = needle"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"text":"The following comparison predicate options are supported for comparison and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"aggregate operators that are used in the predicate:"}]},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSCaseInsensitivePredicateOption","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"'QUEBEC' =[c] 'Quebec'","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"text":"Other comparison predicate options are unsupported, namely ","type":"text"},{"type":"codeVoice","code":"l"},{"type":"text","text":" "},{"type":"text","text":"(for locale sensitivity) and "},{"type":"codeVoice","code":"n"},{"type":"text","text":" (for normalization). A comparison is"},{"type":"text","text":" "},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"text":" ","type":"text"},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"text":" ","type":"text"},{"type":"text","text":"like "},{"type":"codeVoice","code":"ALL"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ANY"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Operands","text":"Operands","type":"heading","level":3},{"inlineContent":[{"text":"Operands in predicates can be ","type":"text"},{"identifier":"#variables","isActive":true,"type":"reference"},{"type":"text","text":", "},{"type":"reference","identifier":"#key-paths","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or almost anything else that can appear","type":"text"},{"type":"text","text":" "},{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Automatic type casting is not performed. Therefore, a feature only matches a"},{"text":" ","type":"text"},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"type":"text","text":" "},{"text":"value specified in the predicate. Use the ","type":"text"},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" operator to convert a key"},{"type":"text","text":" "},{"text":"path or variable into a matching type:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a number, use "},{"type":"codeVoice","code":"CAST(key, 'NSNumber')"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To cast a value to a string, use ","type":"text"},{"code":"CAST(key, 'NSString')","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a color, use ","type":"text"},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"text":" on macOS.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast an "},{"code":"NSColor","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" object to an array, use "},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"text":" ","type":"text"},{"type":"text","text":"Format String Syntax” chapter of the"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true,"overridingTitle":"Predicate Programming Guide","overridingTitleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}]}]},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation."}],"type":"paragraph"},{"type":"heading","anchor":"Using-expressions-to-configure-layout-and-paint-attributes","text":"Using expressions to configure layout and paint attributes","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"type":"text","text":" "},{"type":"text","text":"types of expressions is discussed below."}]},{"type":"heading","text":"Constant values","level":3,"anchor":"Constant-values"},{"inlineContent":[{"type":"text","text":"A constant value can be of any of the following types:"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS)","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"text":" (macOS)","type":"text"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSString"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}]}],[{"type":"paragraph","inlineContent":[{"code":"[Float]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSArray<NSString>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[String]"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"type":"text","text":" (iOS)"},{"code":"NSValue","type":"codeVoice"},{"type":"text","text":" containing "},{"code":"CGVector","type":"codeVoice"},{"type":"text","text":" (macOS)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSValue.cgVectorValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"code":"NSValue","type":"codeVoice"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"type":"text","text":" (macOS)"}]}]],[[{"inlineContent":[{"code":"NSValue.UIEdgeInsetsValue","type":"codeVoice"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}]]]},{"inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"code":"-[NSNumber numberWithDouble:]","type":"codeVoice"},{"type":"text","text":" instead"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}],"type":"paragraph"},{"type":"heading","anchor":"Key-paths","text":"Key paths","level":3},{"type":"paragraph","inlineContent":[{"text":"A key path expression refers to an attribute of the ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"text":" object being","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluated for display. For example, if a polygon’s "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"type":"text","text":" "},{"type":"text","text":"dictionary contains the "},{"code":"floorCount","type":"codeVoice"},{"text":" key, then the key path ","type":"text"},{"code":"floorCount","type":"codeVoice"},{"type":"text","text":" refers"},{"type":"text","text":" "},{"type":"text","text":"to the value of the "},{"code":"floorCount","type":"codeVoice"},{"type":"text","text":" attribute when evaluating that particular"},{"text":" ","type":"text"},{"type":"text","text":"polygon."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following special attributes are also available on features that are produced"},{"text":" ","type":"text"},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Attribute"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Type"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Meaning","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"cluster","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Bool","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"cluster_id","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identifier for the point cluster."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"point_count"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"text":"The number of point features in a given cluster.","type":"text"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"text":" ","type":"text"},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"type":"codeVoice","code":"ISO 3166-1:2006"},{"type":"text","text":", an"},{"text":" ","type":"text"},{"type":"text","text":"expression format string of "},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"type":"text","text":" or a predicate format"},{"type":"text","text":" "},{"text":"string of ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"text":" would raise an exception. Instead, use a","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"%K"},{"type":"text","text":" placeholder or the "},{"type":"codeVoice","code":"+[NSExpression expressionForKeyPath:]"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"type":"codeListing","syntax":"swift","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"]},{"anchor":"Functions","level":3,"text":"Functions","type":"heading"},{"inlineContent":[{"type":"text","text":"Of the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},{"text":" ","type":"text"},{"type":"text","text":"by the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the following subset is supported in layer attribute values:"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average:"}]}],[{"type":"paragraph","inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"sum:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"count:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"min:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"max:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"max({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"add:to:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 + 2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"from:subtract:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"2 - 1","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"multiply:by:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"1 * 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"divide:by:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 \/ 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"sqrt:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"inlineContent":[{"code":"log:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"log(10)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"ln(2)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 ** 2"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"exp:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"exp(0)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"ceiling:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"abs(-1)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"trunc:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"trunc(6378.1370)"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"floor:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"uppercase:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"uppercase('Elysian Fields')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"lowercase:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"noindex:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex(0 + 2 + c)"}]}]],[[{"inlineContent":[{"code":"length:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"text":"A number of ","type":"text"},{"identifier":"#MapLibre-specific-functions","type":"reference","isActive":true},{"type":"text","text":" are also"},{"text":" ","type":"text"},{"type":"text","text":"available."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"strong"},{"type":"text","text":" supported:"}]},{"rows":[[[{"inlineContent":[{"text":"Initializer parameter","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"median({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"mode:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"mode({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"stddev:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"stddev({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"random","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random()"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"randomn:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"randomn(10)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now"}]}],[{"inlineContent":[{"type":"codeVoice","code":"now()"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}]}],[{"inlineContent":[{"code":"bitwiseOr:with:(5, 3)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"bitwiseXor:with:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"leftshift:by:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"leftshift:by:(23, 1)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"rightshift:by:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"onesComplement:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:"}]}],[{"inlineContent":[{"code":"distanceToLocation:fromLocation:(there, here)","type":"codeVoice"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"level":3,"text":"Conditionals","anchor":"Conditionals","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"type":"text","text":" "},{"text":"method and ","type":"text"},{"type":"codeVoice","code":"TERNARY()"},{"text":" operator. If you need to express multiple cases","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_if-code"},{"type":"text","text":" or "},{"isActive":true,"identifier":"#code-mgl_match-code","type":"reference"},{"type":"text","text":" function."}]},{"text":"Aggregates","level":3,"anchor":"Aggregates","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aggregate expressions can contain arrays of expressions. In some cases, it is"},{"type":"text","text":" "},{"type":"text","text":"possible to use the array itself instead of wrapping the array in an aggregate"},{"type":"text","text":" "},{"text":"expression.","type":"text"}]},{"level":3,"type":"heading","text":"Variables","anchor":"Variables"},{"inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"text":"Variable","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$featureIdentifier"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any GeoJSON data type"}]}],[{"inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$geometryType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}],[{"inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"type":"text","text":"*   "},{"code":"Point","type":"codeVoice"},{"type":"text","text":" for point features, corresponding to the "},{"code":"MLNPointAnnotation","type":"codeVoice"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"code":"LineString","type":"codeVoice"},{"type":"text","text":" for polyline features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true,"type":"reference"},{"type":"text","text":" class"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Polygon"},{"type":"text","text":" for polygon features, corresponding to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","type":"reference"},{"text":" class","type":"text"},{"text":"This variable corresponds to the ","type":"text"},{"code":"NSExpression.geometryTypeVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"$heatmapDensity","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"reference"},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"code":"heatmapColor","type":"codeVoice"},{"type":"text","text":" property. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"code":"$zoomLevel","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the "},{"code":"NSExpression.zoomLevelVariableExpression","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$lineProgress"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","isActive":true},{"text":" property. It corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to these variables, you can define your own variables and refer to"},{"type":"text","text":" "},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"type":"reference","overridingTitleInlineContent":[{"text":"MapLibre-specific function","type":"text"}],"isActive":true,"identifier":"#MapLibre-specific-functions","overridingTitle":"MapLibre-specific function"},{"type":"text","text":" that takes an"},{"type":"text","text":" "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" as an argument:"}]},{"code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"],"type":"codeListing","syntax":"objc"},{"syntax":"swift","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"type":"codeListing"},{"anchor":"MapLibre-specific-functions","text":"MapLibre-specific functions","type":"heading","level":2},{"content":[{"inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","isActive":true,"type":"reference"},{"text":" for more information and workarounds.","type":"text"}],"type":"paragraph"}],"name":"Warning","style":"warning","type":"aside"},{"inlineContent":[{"text":"For compatibility with the MapLibre Style Spec, the following functions","type":"text"},{"text":" ","type":"text"},{"text":"are defined by this SDK. When setting a style layer property, you can call these","type":"text"},{"type":"text","text":" "},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"text":" method or a convenient format","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string syntax:"}],"type":"paragraph"},{"text":"mgl_does:have:","level":3,"anchor":"mgldoeshave","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"type":"text","text":" or "},{"code":"mgl_does:have:(%@, '🧀🍔')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns a Boolean value indicating whether the dictionary has a value for the","type":"text"},{"text":" ","type":"text"},{"text":"key or whether the evaluated object (","type":"text"},{"code":"SELF","type":"codeVoice"},{"type":"text","text":") has a value for the feature"},{"text":" ","type":"text"},{"type":"text","text":"attribute. Compared to the "},{"type":"reference","identifier":"#code-mgl_has-code","isActive":true},{"type":"text","text":" custom function,"},{"type":"text","text":" "},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"type":"text","text":" "},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"code":"key != NIL","type":"codeVoice"},{"text":" or","type":"text"},{"type":"text","text":" "},{"code":"%@[key] != NIL","type":"codeVoice"},{"type":"text","text":" but can be used outside of a predicate."}]},{"level":3,"text":"mgl_interpolate:withCurveType:parameters:stops:","anchor":"mglinterpolatewithCurveTypeparametersstops","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"text":" ","type":"text"},{"type":"text","text":"output values (“stops”). Compared to the"},{"text":" ","type":"text"},{"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"type":"text","text":" "},{"type":"text","text":"in as the first argument to this function."}],"type":"paragraph"},{"type":"heading","anchor":"mglstepfromstops","level":3,"text":"mgl_step:from:stops:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_step:from:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_step:from:stops:(x, 11, %@)"}]},{"type":"paragraph","inlineContent":[{"text":"Produces discrete, stepped results by evaluating a piecewise-constant function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_stepwithminimum-stops-code"},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the first argument to this function."}]},{"type":"heading","anchor":"mgljoin","level":3,"text":"mgl_join:"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_join:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of concatenating together all the elements of an array in"},{"type":"text","text":" "},{"text":"order. Compared to the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-stringbyappendingstring-code","isActive":true,"type":"reference"},{"text":" custom","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"text":" ","type":"text"},{"type":"text","text":"expression containing the strings to concatenate."}]},{"anchor":"mglacos","level":3,"type":"heading","text":"mgl_acos:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_acos:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_acos(1)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the arccosine of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglasin","type":"heading","level":3,"text":"mgl_asin:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_asin:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_asin(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"anchor":"mglatan","text":"mgl_atan:","type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_atan(20)","type":"codeVoice"}]},{"inlineContent":[{"text":"Returns the arctangent of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglcos","text":"mgl_cos:","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_cos:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_cos(0)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the cosine of the number."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_log2:","anchor":"mgllog2"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_log2:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_log2(1024)"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the base-2 logarithm of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","isActive":true},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"mglround","level":3,"type":"heading","text":"mgl_round:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_round(1.5)"}]},{"inlineContent":[{"text":"Returns the number rounded to the nearest integer. If the number is halfway","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"between two integers, this function rounds it away from zero."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_sin:","type":"heading","anchor":"mglsin","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_sin(0)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the sine of the number."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"mgl_tan:","anchor":"mgltan","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_tan:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_tan(0)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the tangent of the number.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_distanceFrom:","level":3,"type":"heading","anchor":"mgldistanceFrom"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_distanceFrom:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"text":" with an ","type":"text"},{"code":"MLNShape","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the straight-line distance from the evaluated object to the given shape."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"anchor":"mglcoalesce","text":"mgl_coalesce:","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_coalesce:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_coalesce({x, y, z})","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the first non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value from an array of expressions.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","level":3,"text":"mgl_attributed:","anchor":"mglattributed"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_attributed:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_attributed({x, y, z})","type":"codeVoice"}]},{"inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"type":"codeVoice","code":"MLNAttributedExpression"},{"type":"text","text":" objects, for use"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"MLNSymbolStyleLayer.text"},{"type":"text","text":" property."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"text":" valid attributes.","type":"text"}]},{"rows":[[[{"inlineContent":[{"text":"Key","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value Type"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"NSString","type":"codeVoice"},{"text":" array.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}]}],[{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"type":"text","text":" value."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontColorAttribute"}]}],[{"inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" evaluating to an ","type":"text"},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" (iOS) or "},{"type":"codeVoice","code":"NSColor"},{"text":" (macOS).","type":"text"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"MLNLET","text":"MLN_LET","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_LET:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" values, followed by an "},{"type":"codeVoice","code":"NSExpression"},{"text":" ","type":"text"},{"type":"text","text":"that may contain references to those variables."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the result of evaluating an expression with the given variable values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Compared to the"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_expressionwithcontext-code","isActive":true},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"type":"text","text":"function, this function takes the variable names and values inline before the"},{"type":"text","text":" "},{"text":"expression that contains references to those variables.","type":"text"}]},{"level":3,"anchor":"MLNMATCH","type":"heading","text":"MLN_MATCH"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_MATCH:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression. Each argument pair consists of a constant value followed by an"},{"type":"text","text":" "},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"type":"text","text":" "},{"text":"If the input value is an aggregate expression, then any of the constant values within","type":"text"},{"text":" ","type":"text"},{"text":"that aggregate expression result in the following argument. This is shorthand for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specifying an argument pair for each of the constant values within that aggregate"},{"text":" ","type":"text"},{"text":"expression. It is not possible to match the aggregate expression itself.","type":"text"}]},{"inlineContent":[{"text":"Returns the result of matching the input expression against the given constant","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"MLN_IF","level":3,"anchor":"MLNIF","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Alternating "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" conditionals and resulting expressions,"},{"type":"text","text":" "},{"type":"text","text":"followed by a default expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the first expression that meets the condition; otherwise, the default","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value. Unlike"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"type":"text","text":" or"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"text":" ","type":"text"},{"type":"text","text":"and is supported on iOS 8."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":" and macOS 10.10.","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":"; however, each conditional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"MLN_FUNCTION","anchor":"MLNFUNCTION","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"MLN_FUNCTION('typeof', mystery)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Any arguments required by the expression operator.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},{"type":"text","text":"."}]},{"level":2,"anchor":"Custom-functions","text":"Custom functions","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForFunction:selectorName:arguments:]","type":"codeVoice"},{"type":"text","text":" method or the"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" format string syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"text":" ","type":"text"},{"type":"text","text":"classes, but you should not call them directly outside the context of an"},{"type":"text","text":" "},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"text":" ","type":"text"},{"type":"text","text":"or may result in undefined behavior."}]},{"inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"type":"text","text":" "},{"type":"text","text":"function is available. To use these operators in an "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":", call the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_function-code","isActive":true},{"text":" function with the same arguments","type":"text"},{"text":" ","type":"text"},{"text":"that the operator expects.","type":"text"}],"type":"paragraph"},{"anchor":"boolValue","level":3,"type":"heading","text":"boolValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"boolValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number or string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" None."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"text":" when then input is an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"empty string, 0, "},{"type":"codeVoice","code":"FALSE"},{"text":", ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", or "},{"code":"NaN","type":"codeVoice"},{"text":", otherwise ","type":"text"},{"code":"TRUE","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"mgl_has:","anchor":"mglhas"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_has:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"code":"NSDictionary","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"or the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to an ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"representing the key to look up in the dictionary or the feature attribute to"},{"text":" ","type":"text"},{"text":"look up in the evaluated object (see ","type":"text"},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":").","type":"text"}]},{"inlineContent":[{"type":"codeVoice","code":"true"},{"text":" if the dictionary has a value for the key or if the evaluated","type":"text"},{"type":"text","text":" "},{"text":"object has a value for the feature attribute.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_does-have-code"},{"text":" function, which is used on its own","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator. You can also check whether an object has an"},{"text":" ","type":"text"},{"type":"text","text":"attribute by comparing the key path to "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", for example "},{"code":"cheeseburger != NIL","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"or "},{"code":"burger.cheese != NIL","type":"codeVoice"}]},{"text":"mgl_expressionWithContext:","anchor":"mglexpressionWithContext","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_expressionWithContext:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)","type":"codeVoice"},{"text":" with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary containing "},{"code":"ios","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"macos"},{"type":"text","text":" keys"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that may contain references to the variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}]},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" with "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":"s as keys and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"text":" ","type":"text"},{"text":"value is the variable’s value within the target expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The target expression with variable subexpressions replaced with the values","type":"text"},{"type":"text","text":" "},{"text":"defined in the context dictionary.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_let-code","isActive":true,"type":"reference"},{"text":" function, which is used on its own without the","type":"text"},{"type":"text","text":" "},{"code":"FUNCTION()","type":"codeVoice"},{"text":" operator.","type":"text"}]},{"text":"mgl_interpolateWithCurveType:parameters:stops:","type":"heading","anchor":"mglinterpolateWithCurveTypeparametersstops","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"type":"text","text":" "},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"text":" ","type":"text"},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"linear"},{"type":"text","text":", "},{"type":"codeVoice","code":"exponential"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"cubic-bezier"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second argument is an expression providing parameters for the curve:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"linear"},{"text":", the argument is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"exponential"},{"type":"text","text":", the argument is an"},{"type":"text","text":" "},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"type":"text","text":" "},{"type":"text","text":"exponential interpolation."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"cubic-bezier"},{"type":"text","text":", the argument is an"},{"text":" ","type":"text"},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"type":"text","text":" "},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"text":" ","type":"text"},{"type":"text","text":"cubic Bézier curve."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third argument is an "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A value interpolated along the continuous mathematical function defined by the"},{"type":"text","text":" "},{"type":"text","text":"arguments, with the target as the input to the function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"type":"text","text":" "},{"text":"values may be constant values or ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" objects. For example, you can"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"text":"method and the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","isActive":true},{"type":"text","text":" "},{"text":"function, which is used on its own without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator.","type":"text"}]},{"type":"heading","level":3,"anchor":"mglnumberWithFallbackValues","text":"mgl_numberWithFallbackValues:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"floatValue","type":"codeVoice"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"type":"text","text":" "},{"text":"or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"decimalValue"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"text":" ","type":"text"},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"Zero or more "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"text":" ","type":"text"},{"type":"text","text":"or string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"code":"FALSE","type":"codeVoice"},{"text":", the result is 0.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","type":"reference","isActive":true},{"text":"”","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"type":"text","text":" "},{"type":"text","text":"first successful conversion is obtained."}],"type":"paragraph"}]}]}]}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"number by passing the value and the string "},{"code":"NSNumber","type":"codeVoice"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"type":"text","text":"operator."}]},{"anchor":"mglstepWithMinimumstops","text":"mgl_stepWithMinimum:stops:","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"text":"a dictionary with zoom levels or other constant values as keys","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" "},{"text":"The first argument is an expression that evaluates to a number, specifying","type":"text"},{"text":" ","type":"text"},{"text":"the minimum value in case the target is less than any of the stops in the","type":"text"},{"type":"text","text":" "},{"text":"second argument.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The second argument is an "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"text":"interpolation’s stops, with numeric zoom levels as keys and expressions as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"text":"The output value of the stop whose key is just less than the evaluated target,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or the minimum value if the target is less than the least of the stops’ keys."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"text":" ","type":"text"},{"type":"text","text":"values may be constant values or "},{"code":"NSExpression","type":"codeVoice"},{"text":" objects. For example, you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]"},{"text":" ","type":"text"},{"text":"method and the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"stringByAppendingString","type":"heading","text":"stringByAppendingString:","level":3},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"stringByAppendingString:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a string."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"One or more "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target string with each of the argument strings appended in order."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"type":"text","text":" "},{"text":"method and is similar to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_join-code"},{"type":"text","text":" function, which concatenates multiple"},{"type":"text","text":" "},{"text":"expressions and is used on its own without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"text":"stringValue","anchor":"stringValue","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"stringValue"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'stringValue')"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" ","type":"text"},{"text":"None.","type":"text"}]},{"inlineContent":[{"text":"A string representation of the target:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"text","text":"NIL"},{"type":"text","text":", the result is the empty string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a number, it is converted to a string as specified by the"},{"type":"text","text":" "},{"text":"“","type":"text"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true},{"type":"text","text":"”"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"text":", where ","type":"text"},{"type":"text","text":"r"},{"type":"text","text":", "},{"type":"text","text":"g"},{"text":", and ","type":"text"},{"text":"b","type":"text"},{"text":" are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"type":"text","text":"a"},{"text":" ranges from 0 to 1.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Otherwise, the target is converted to a string in the format specified by the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true},{"type":"text","text":" "},{"type":"text","text":"function of the ECMAScript Language Specification."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string by passing the value and the string "},{"code":"NSString","type":"codeVoice"},{"text":" into the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"text":" ","type":"text"},{"text":"operator.","type":"text"}],"type":"paragraph"}]}],"kind":"article","metadata":{"modules":[{"name":"MapLibre"}],"role":"article","roleHeading":"Article","title":"Predicates and expressions"},"sections":[],"seeAlsoSections":[{"title":"Other Articles","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"],"generated":true}],"references":{"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"titleInlineContent":[{"type":"codeVoice","code":"coalesce"}],"title":"coalesce","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","type":"link"},"#code-mgl_let-code":{"identifier":"#code-mgl_let-code","type":"link","title":"MLN_LET","titleInlineContent":[{"type":"codeVoice","code":"MLN_LET"}],"url":"#code-mgl_let-code"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"titleInlineContent":[{"type":"codeVoice","code":"NSExpression+MLNAdditions.h"}],"title":"NSExpression+MLNAdditions.h","url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"link"},"#code-mgl_if-code":{"identifier":"#code-mgl_if-code","type":"link","title":"MLN_IF()","titleInlineContent":[{"type":"codeVoice","code":"MLN_IF()"}],"url":"#code-mgl_if-code"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"titleInlineContent":[{"type":"text","text":"ToNumber Applied to the String Type"}],"title":"ToNumber Applied to the String Type","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","type":"link"},"#code-mgl_match-code":{"identifier":"#code-mgl_match-code","type":"link","title":"MLN_MATCH()","titleInlineContent":[{"type":"codeVoice","code":"MLN_MATCH()"}],"url":"#code-mgl_match-code"},"#code-stringbyappendingstring-code":{"titleInlineContent":[{"type":"codeVoice","code":"stringByAppendingString:"}],"title":"stringByAppendingString:","url":"#code-stringbyappendingstring-code","identifier":"#code-stringbyappendingstring-code","type":"link"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"link","title":"functions predefined","titleInlineContent":[{"type":"text","text":"functions predefined"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"#code-mgl_has-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_has:"}],"title":"mgl_has:","url":"#code-mgl_has-code","identifier":"#code-mgl_has-code","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","type":"link","title":"case","titleInlineContent":[{"type":"codeVoice","code":"case"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"titleInlineContent":[{"type":"codeVoice","code":"to-string"}],"title":"to-string","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"role":"symbol","abstract":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the line segments that"},{"text":" ","type":"text"},{"text":"connect them. For example, you could use an polyline to represent a road or the","type":"text"},{"type":"text","text":" "},{"text":"path along which something moves.","type":"text"}],"title":"MLNPolyline","url":"\/documentation\/maplibre\/mlnpolyline","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","kind":"symbol","fragments":[{"kind":"identifier","text":"MLNPolyline"}],"type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","type":"link","title":"asin","titleInlineContent":[{"type":"codeVoice","code":"asin"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"titleInlineContent":[{"type":"codeVoice","code":"step"}],"title":"step","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","type":"link"},"#code-mgl_stepwithminimum-stops-code":{"identifier":"#code-mgl_stepwithminimum-stops-code","type":"link","title":"mgl_stepWithMinimum:stops:","titleInlineContent":[{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}],"url":"#code-mgl_stepwithminimum-stops-code"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"title":"mgl_interpolate:withCurveType:parameters:stops:","url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"text":" ","type":"text"},{"text":"effect on lines defined by an ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" whose "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true},{"type":"text","text":" "},{"type":"text","text":"option is set to "},{"type":"codeVoice","code":"YES"},{"type":"text","text":"."}],"title":"lineGradient","role":"symbol","fragments":[{"kind":"identifier","text":"lineGradient"}],"url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","type":"link","title":"acos","titleInlineContent":[{"type":"codeVoice","code":"acos"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"#code-mgl_does-have-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_does:have:"}],"title":"mgl_does:have:","url":"#code-mgl_does-have-code","identifier":"#code-mgl_does-have-code","type":"link"},"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","type":"link","title":"kernel density estimation","titleInlineContent":[{"type":"text","text":"kernel density estimation"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"#variables":{"titleInlineContent":[{"type":"text","text":"variables"}],"title":"variables","url":"#variables","identifier":"#variables","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","type":"link","title":"log2","titleInlineContent":[{"type":"codeVoice","code":"log2"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"titleInlineContent":[{"type":"codeVoice","code":"JSON.stringify()"}],"title":"JSON.stringify()","url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre":{"type":"topic","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"title":"MapLibre","role":"collection","url":"\/documentation\/maplibre","kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"link","title":"+[NSExpression expressionForFunction:arguments:] method","titleInlineContent":[{"type":"codeVoice","code":"+[NSExpression expressionForFunction:arguments:]"},{"type":"text","text":" method"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","kind":"article","type":"topic","role":"article","title":"User Interactions","abstract":[{"type":"text","text":"Learn how to work with gesture recognizers"}]},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"titleInlineContent":[{"type":"codeVoice","code":"round"}],"title":"round","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","type":"link","title":"let","titleInlineContent":[{"type":"codeVoice","code":"let"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},"https://maplibre.org/maplibre-style-spec/expressions/":{"titleInlineContent":[{"type":"text","text":"MapLibre Style Spec"}],"title":"MapLibre Style Spec","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","type":"link","title":"tan","titleInlineContent":[{"type":"codeVoice","code":"tan"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"title":"mgl_interpolateWithCurveType:parameters:stops:","url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"link","title":"sin","titleInlineContent":[{"type":"codeVoice","code":"sin"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"titleInlineContent":[{"type":"codeVoice","code":"distance"}],"title":"distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","type":"link"},"https://github.com/maplibre/maplibre-native/issues/331":{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","type":"link","title":"#331","titleInlineContent":[{"type":"text","text":"#331"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"titleInlineContent":[{"type":"codeVoice","code":"concat"}],"title":"concat","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"link","title":"match","titleInlineContent":[{"type":"codeVoice","code":"match"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"titleInlineContent":[{"type":"codeVoice","code":"atan"}],"title":"atan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","type":"link"},"#code-mgl_join-code":{"identifier":"#code-mgl_join-code","type":"link","title":"mgl_join:","titleInlineContent":[{"type":"codeVoice","code":"mgl_join:"}],"url":"#code-mgl_join-code"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"titleInlineContent":[{"type":"codeVoice","code":"format"}],"title":"format","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","kind":"article","type":"topic","role":"article","title":"Information for Style Authors","abstract":[]},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","type":"link","title":"to-number","titleInlineContent":[{"type":"codeVoice","code":"to-number"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"title":"MLNShapeSource","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/maplibre\/mlnshapesource","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"text":" ","type":"text"},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"or they may be defined by local or external"},{"text":" ","type":"text"},{"text":"GeoJSON","type":"text"},{"text":" code. A shape source is added to an","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"text":" object along with an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"text":" object. The vector style","type":"text"},{"type":"text","text":" "},{"type":"text","text":"layer defines the appearance of any content supplied by the shape source. You"},{"type":"text","text":" "},{"type":"text","text":"can update a shape source by setting its "},{"code":"shape","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"URL"},{"text":" property.","type":"text"}],"fragments":[{"text":"MLNShapeSource","kind":"identifier"}]},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","kind":"article","role":"article","title":"Adding Multiple Images","abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}]},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"titleInlineContent":[{"type":"text","text":"NumberToString"}],"title":"NumberToString","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","type":"link"},"#MapLibre-specific-functions":{"identifier":"#MapLibre-specific-functions","type":"link","title":"MapLibre-specific functions","titleInlineContent":[{"type":"text","text":"MapLibre-specific functions"}],"url":"#MapLibre-specific-functions"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","kind":"article","title":"Tile URL Templates","role":"article","abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"type":"topic","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"titleInlineContent":[{"type":"codeVoice","code":"interpolate"}],"title":"interpolate","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","type":"link"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link","title":"Predicate Programming Guide","titleInlineContent":[{"type":"text","text":"Predicate Programming Guide"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"},"#code-mgl_function-code":{"titleInlineContent":[{"type":"codeVoice","code":"MLN_FUNCTION()"}],"title":"MLN_FUNCTION()","url":"#code-mgl_function-code","identifier":"#code-mgl_function-code","type":"link"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"link","title":"cos","titleInlineContent":[{"type":"codeVoice","code":"cos"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"role":"symbol","abstract":[{"text":"An ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","type":"reference"},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"text":" ","type":"text"},{"text":"vertices, specified as ","type":"text"},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the edges that"},{"text":" ","type":"text"},{"text":"connect them. For example, you could use a polygon shape to represent a","type":"text"},{"type":"text","text":" "},{"text":"building, a lake, or an area you want to highlight.","type":"text"}],"title":"MLNPolygon","url":"\/documentation\/maplibre\/mlnpolygon","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","kind":"symbol","fragments":[{"text":"MLNPolygon","kind":"identifier"}],"type":"topic"},"#code-mgl_expressionwithcontext-code":{"titleInlineContent":[{"type":"codeVoice","code":"mgl_expressionWithContext:"}],"title":"mgl_expressionWithContext:","url":"#code-mgl_expressionwithcontext-code","identifier":"#code-mgl_expressionwithcontext-code","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","kind":"article","type":"topic","role":"article","title":"Customizing Fonts","abstract":[{"text":"Using custom fonts","type":"text"}]},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"link","title":"has","titleInlineContent":[{"type":"codeVoice","code":"has"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"#using-expressions-to-configure-layout-and-paint-attributes":{"titleInlineContent":[{"type":"text","text":"inside an expression"}],"title":"inside an expression","url":"#using-expressions-to-configure-layout-and-paint-attributes","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","type":"link"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","kind":"article","type":"topic","role":"article","title":"Info.plist Keys","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"type":"codeVoice","code":"Info.plist"},{"text":" keys in your application in order to configure various settings.","type":"text"}]},"#key-paths":{"identifier":"#key-paths","type":"link","title":"key paths","titleInlineContent":[{"type":"text","text":"key paths"}],"url":"#key-paths"}}}