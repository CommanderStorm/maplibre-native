{"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"Style layers use predicates and expressions to determine what to display and how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to format it. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Predicates"}]},{"type":"text","text":" are represented by the same "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" class that"},{"type":"text","text":" "},{"text":"filters results from Core Data or items in an ","type":"text"},{"type":"codeVoice","code":"NSArray"},{"text":" in Objective-C.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Predicates are based on "},{"inlineContent":[{"text":"expressions","type":"text"}],"type":"emphasis"},{"type":"text","text":", represented by the "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" class."},{"type":"text","text":" "},{"text":"Somewhat unusually, style layers also use expressions on their own.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This document discusses the specific subset of the predicate and expression","type":"text"},{"type":"text","text":" "},{"text":"syntax supported by this SDK. For a more general introduction to predicates and","type":"text"},{"text":" ","type":"text"},{"text":"expressions, consult the","type":"text"},{"type":"text","text":" "},{"inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"in Apple developer documentation. For additional detail on how this SDK has"},{"type":"text","text":" "},{"text":"extended the ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class, see the "},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","isActive":true},{"type":"text","text":" header."}]},{"anchor":"Using-predicates-to-filter-vector-data","text":"Using predicates to filter vector data","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Most style layer classes display "},{"code":"MLNFeature","type":"codeVoice"},{"text":" objects that you can show or hide","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"based on the feature’s attributes. Use the "},{"code":"MLNVectorStyleLayer.predicate","type":"codeVoice"},{"text":" ","type":"text"},{"text":"property to include only the features in the source layer that satisfy a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"condition that you define."}],"type":"paragraph"},{"text":"Operators","level":3,"anchor":"Operators","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison operators are supported:"}]},{"header":"row","rows":[[[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"key = value","type":"codeVoice"},{"type":"codeVoice","code":"key == value"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSGreaterThanOrEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key >= value"},{"code":"key => value","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSLessThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"code":"key <= value","type":"codeVoice"},{"type":"codeVoice","code":"key =< value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSGreaterThanPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"key > value"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSLessThanPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"key < value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key != value"},{"code":"key <> value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSBetweenPredicateOperatorType"}]}],[{"inlineContent":[{"code":"key BETWEEN { 32, 212 }","type":"codeVoice"}],"type":"paragraph"}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"text":" ","type":"text"},{"type":"text","text":"attribute to "},{"code":"NULL","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":". Predicates created using the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSPredicate predicateWithValue:]"},{"type":"text","text":" method are also supported. String"},{"text":" ","type":"text"},{"text":"operators and custom operators are not supported.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following compound operators are supported:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"code":"NSCompoundPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAndPredicateType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"predicate1 AND predicate2"},{"code":"predicate1 && predicate2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSOrPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"predicate1 OR predicate2","type":"codeVoice"},{"text":"predicate1 || predicate2","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSNotPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"type":"codeVoice","code":"!predicate"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"text":"The following aggregate operators are supported:","type":"text"}]},{"header":"row","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSInPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSContainsPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}],"type":"paragraph"}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"code":"IN","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CONTAINS"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"code":"SELF","type":"codeVoice"},{"text":") lies within a given ","type":"text"},{"code":"MLNShape","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"MLNFeature"},{"text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:","type":"text"}]},{"code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"],"syntax":"objc","type":"codeListing"},{"type":"codeListing","syntax":"swift","code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"]},{"inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateModifier"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSAllPredicateModifier","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotEqualToPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"ALL haystack != needle"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSAnyPredicateModifier","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"ANY haystack = needle","type":"codeVoice"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following comparison predicate options are supported for comparison and"},{"type":"text","text":" "},{"text":"aggregate operators that are used in the predicate:","type":"text"}]},{"rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"code":"NSCaseInsensitivePredicateOption","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSDiacriticInsensitivePredicateOption","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"'Québec' =[d] 'Quebec'","type":"codeVoice"}]}]]],"header":"row","type":"table"},{"type":"paragraph","inlineContent":[{"text":"Other comparison predicate options are unsupported, namely ","type":"text"},{"code":"l","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"(for locale sensitivity) and "},{"code":"n","type":"codeVoice"},{"type":"text","text":" (for normalization). A comparison is"},{"text":" ","type":"text"},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"type":"text","text":" "},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"type":"text","text":" "},{"type":"text","text":"like "},{"code":"ALL","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ANY"},{"text":".","type":"text"}]},{"level":3,"text":"Operands","anchor":"Operands","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operands in predicates can be "},{"isActive":true,"type":"reference","identifier":"#variables"},{"type":"text","text":", "},{"identifier":"#key-paths","isActive":true,"type":"reference"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"or almost anything else that can appear","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Automatic type casting is not performed. Therefore, a feature only matches a","type":"text"},{"type":"text","text":" "},{"text":"predicate if its value for the attribute in question is of the same type as the","type":"text"},{"text":" ","type":"text"},{"text":"value specified in the predicate. Use the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"text":" operator to convert a key","type":"text"},{"text":" ","type":"text"},{"text":"path or variable into a matching type:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a number, use "},{"type":"codeVoice","code":"CAST(key, 'NSNumber')"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"type":"codeVoice","code":"CAST(key, 'UIColor')"},{"text":" on iOS and ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"type":"text","text":" on macOS."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast an "},{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" or "},{"type":"codeVoice","code":"UIColor"},{"text":" object to an array, use ","type":"text"},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"text":" ","type":"text"},{"type":"text","text":"Format String Syntax” chapter of the"},{"text":" ","type":"text"},{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","isActive":true,"type":"reference","overridingTitle":"Predicate Programming Guide","overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}]}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in Apple developer documentation."}],"type":"paragraph"},{"text":"Using expressions to configure layout and paint attributes","level":2,"anchor":"Using-expressions-to-configure-layout-and-paint-attributes","type":"heading"},{"inlineContent":[{"text":"An expression can contain subexpressions of various types. Each of the supported","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"types of expressions is discussed below."}],"type":"paragraph"},{"level":3,"text":"Constant values","type":"heading","anchor":"Constant-values"},{"type":"paragraph","inlineContent":[{"text":"A constant value can be of any of the following types:","type":"text"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS)","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSString","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[Float]"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSString>"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[String]"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"type":"text","text":" containing "},{"code":"CGVector","type":"codeVoice"},{"type":"text","text":" (macOS)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue"},{"text":" containing ","type":"text"},{"type":"codeVoice","code":"CGVector"},{"text":" (macOS)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"code":"NSValue.edgeInsetsValue","type":"codeVoice"},{"text":" (macOS)","type":"text"}]}],[{"inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"type":"paragraph","inlineContent":[{"text":"For literal floating-point values, use ","type":"text"},{"code":"-[NSNumber numberWithDouble:]","type":"codeVoice"},{"type":"text","text":" instead"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"-[NSNumber numberWithFloat:]"},{"type":"text","text":" to avoid precision issues."}]},{"type":"heading","anchor":"Key-paths","text":"Key paths","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"code":"MLNFeature","type":"codeVoice"},{"text":" object being","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"evaluated for display. For example, if a polygon’s "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"type":"text","text":" "},{"type":"text","text":"dictionary contains the "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" key, then the key path "},{"code":"floorCount","type":"codeVoice"},{"type":"text","text":" refers"},{"type":"text","text":" "},{"type":"text","text":"to the value of the "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" attribute when evaluating that particular"},{"text":" ","type":"text"},{"text":"polygon.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following special attributes are also available on features that are produced"},{"text":" ","type":"text"},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"text":"Attribute","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Type","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool"}]}],[{"inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"cluster_id"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Identifier for the point cluster.","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"point_count"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Number"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The number of point features in a given cluster.","type":"text"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some characters may not be used directly as part of a key path in a format"},{"text":" ","type":"text"},{"text":"string. For example, if a feature’s attribute is named ","type":"text"},{"code":"ISO 3166-1:2006","type":"codeVoice"},{"text":", an","type":"text"},{"text":" ","type":"text"},{"text":"expression format string of ","type":"text"},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"type":"text","text":" or a predicate format"},{"type":"text","text":" "},{"text":"string of ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"text":" would raise an exception. Instead, use a","type":"text"},{"type":"text","text":" "},{"code":"%K","type":"codeVoice"},{"type":"text","text":" placeholder or the "},{"code":"+[NSExpression expressionForKeyPath:]","type":"codeVoice"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"type":"codeListing","syntax":"swift","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"]},{"anchor":"Functions","text":"Functions","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of the"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"by the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the following subset is supported in layer attribute values:"}]},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"average:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"sum:"}],"type":"paragraph"}],[{"inlineContent":[{"code":"sum({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"count:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"count({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"min:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"max:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"max({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"add:to:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 + 2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"from:subtract:"}]}],[{"type":"paragraph","inlineContent":[{"code":"2 - 1","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"multiply:by:"}]}],[{"type":"paragraph","inlineContent":[{"code":"1 * 2","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide:by:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"1 \/ 2"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sqrt:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"log:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"log(10)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"ln:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ln(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"raise:toPower:"}]}],[{"inlineContent":[{"code":"2 ** 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"exp:"}]}],[{"type":"paragraph","inlineContent":[{"code":"exp(0)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"ceiling:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}]}]],[[{"inlineContent":[{"code":"abs:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"abs(-1)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"trunc:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"trunc(6378.1370)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"floor:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"floor(-0.99999)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"uppercase:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"uppercase('Elysian Fields')","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"lowercase:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase('DOWNTOWN')"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex:"}]}],[{"type":"paragraph","inlineContent":[{"code":"noindex(0 + 2 + c)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"length:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"castObject:toType:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}]}]]],"header":"row","type":"table"},{"inlineContent":[{"type":"text","text":"A number of "},{"identifier":"#MapLibre-specific-functions","isActive":true,"type":"reference"},{"type":"text","text":" are also"},{"text":" ","type":"text"},{"type":"text","text":"available."}],"type":"paragraph"},{"inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"strong"},{"type":"text","text":" supported:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"text":"Initializer parameter","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"median:"}]}],[{"type":"paragraph","inlineContent":[{"code":"median({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode:"}]}],[{"inlineContent":[{"code":"mode({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stddev:"}]}],[{"inlineContent":[{"code":"stddev({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"random","type":"codeVoice"}]}],[{"inlineContent":[{"code":"random()","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn:"}]}],[{"type":"paragraph","inlineContent":[{"code":"randomn(10)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"now","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now()"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:(5, 3)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:(5, 3)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"leftshift:by:(23, 1)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}]}]],[[{"inlineContent":[{"code":"onesComplement:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"onesComplement(255)"}]}]],[[{"inlineContent":[{"code":"distanceToLocation:fromLocation:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"distanceToLocation:fromLocation:(there, here)","type":"codeVoice"}]}]]],"header":"row","type":"table"},{"level":3,"anchor":"Conditionals","type":"heading","text":"Conditionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conditionals are supported via the built-in"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and "},{"type":"codeVoice","code":"TERNARY()"},{"text":" operator. If you need to express multiple cases","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"type":"text","text":" "},{"identifier":"#code-mgl_if-code","type":"reference","isActive":true},{"text":" or ","type":"text"},{"identifier":"#code-mgl_match-code","type":"reference","isActive":true},{"text":" function.","type":"text"}]},{"text":"Aggregates","type":"heading","anchor":"Aggregates","level":3},{"type":"paragraph","inlineContent":[{"text":"Aggregate expressions can contain arrays of expressions. In some cases, it is","type":"text"},{"text":" ","type":"text"},{"text":"possible to use the array itself instead of wrapping the array in an aggregate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression."}]},{"level":3,"anchor":"Variables","text":"Variables","type":"heading"},{"inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"text":"Variable","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"inlineContent":[{"code":"$featureIdentifier","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Any GeoJSON data type","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$geometryType"}]}],[{"inlineContent":[{"text":"String","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:"},{"text":"*   ","type":"text"},{"code":"Point","type":"codeVoice"},{"text":" for point features, corresponding to the ","type":"text"},{"type":"codeVoice","code":"MLNPointAnnotation"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"code":"LineString","type":"codeVoice"},{"text":" for polyline features, corresponding to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"code":"Polygon","type":"codeVoice"},{"type":"text","text":" for polygon features, corresponding to the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" class"},{"type":"text","text":"This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$heatmapDensity"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},{"type":"text","text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the "},{"type":"codeVoice","code":"heatmapColor"},{"text":" property. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"text":" property.","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.zoomLevelVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"$lineProgress"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the "},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","type":"reference"},{"type":"text","text":" property. It corresponds to the "},{"code":"NSExpression.lineProgressVariableExpression","type":"codeVoice"},{"type":"text","text":" property."}]}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"In addition to these variables, you can define your own variables and refer to"},{"text":" ","type":"text"},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of a "},{"isActive":true,"overridingTitle":"MapLibre-specific function","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"MapLibre-specific function"}],"identifier":"#MapLibre-specific-functions"},{"type":"text","text":" that takes an"},{"type":"text","text":" "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" as an argument:"}],"type":"paragraph"},{"type":"codeListing","syntax":"objc","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"]},{"syntax":"swift","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"],"type":"codeListing"},{"type":"heading","anchor":"MapLibre-specific-functions","level":2,"text":"MapLibre-specific functions"},{"type":"aside","name":"Warning","style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","isActive":true},{"type":"text","text":" for more information and workarounds."}]}]},{"inlineContent":[{"text":"For compatibility with the MapLibre Style Spec, the following functions","type":"text"},{"type":"text","text":" "},{"text":"are defined by this SDK. When setting a style layer property, you can call these","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"functions just like the predefined functions above, using either the"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method or a convenient format"},{"text":" ","type":"text"},{"type":"text","text":"string syntax:"}],"type":"paragraph"},{"type":"heading","text":"mgl_does:have:","level":3,"anchor":"mgldoeshave"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_does:have:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:(%@, '🧀🍔')"}]},{"inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"text":" ","type":"text"},{"text":"key or whether the evaluated object (","type":"text"},{"type":"codeVoice","code":"SELF"},{"type":"text","text":") has a value for the feature"},{"type":"text","text":" "},{"text":"attribute. Compared to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"#code-mgl_has-code"},{"type":"text","text":" custom function,"},{"text":" ","type":"text"},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"type":"text","text":" "},{"text":"function. Both functions are equivalent to the syntax ","type":"text"},{"code":"key != NIL","type":"codeVoice"},{"text":" or","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"%@[key] != NIL"},{"text":" but can be used outside of a predicate.","type":"text"}],"type":"paragraph"},{"text":"mgl_interpolate:withCurveType:parameters:stops:","level":3,"type":"heading","anchor":"mglinterpolatewithCurveTypeparametersstops"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Produces continuous, smooth results by interpolating between pairs of input and"},{"text":" ","type":"text"},{"type":"text","text":"output values (“stops”). Compared to the"},{"type":"text","text":" "},{"identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"custom function, the input expression (that function’s target) is instead passed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in as the first argument to this function."}]},{"type":"heading","text":"mgl_step:from:stops:","level":3,"anchor":"mglstepfromstops"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_step:from:stops:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_step:from:stops:(x, 11, %@)","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Produces discrete, stepped results by evaluating a piecewise-constant function"},{"type":"text","text":" "},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"#code-mgl_stepwithminimum-stops-code"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, the input expression (that function’s target) is instead passed in as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the first argument to this function."}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"mgljoin","text":"mgl_join:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_join:"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_join({'Old', 'MacDonald'})","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the result of concatenating together all the elements of an array in","type":"text"},{"type":"text","text":" "},{"text":"order. Compared to the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-stringbyappendingstring-code","isActive":true,"type":"reference"},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"text":" ","type":"text"},{"type":"text","text":"expression containing the strings to concatenate."}],"type":"paragraph"},{"anchor":"mglacos","type":"heading","level":3,"text":"mgl_acos:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_acos(1)"}]},{"inlineContent":[{"text":"Returns the arccosine of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"anchor":"mglasin","text":"mgl_asin:","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_asin:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_asin(0)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arcsine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"type":"heading","anchor":"mglatan","text":"mgl_atan:"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_atan:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_atan(20)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the arctangent of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglcos","text":"mgl_cos:","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos(0)"}]},{"inlineContent":[{"text":"Returns the cosine of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"type":"heading","level":3,"text":"mgl_log2:","anchor":"mgllog2"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_log2:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_log2(1024)","type":"codeVoice"}]},{"inlineContent":[{"text":"Returns the base-2 logarithm of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_round:","anchor":"mglround","level":3,"type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_round:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_round(1.5)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the number rounded to the nearest integer. If the number is halfway"},{"type":"text","text":" "},{"type":"text","text":"between two integers, this function rounds it away from zero."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"mglsin","text":"mgl_sin:","level":3,"type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_sin:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_sin(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the sine of the number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"mgl_tan:","level":3,"type":"heading","anchor":"mgltan"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_tan:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_tan(0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the tangent of the number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"text":"mgl_distanceFrom:","type":"heading","level":3,"anchor":"mgldistanceFrom"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom(%@)"},{"text":" with an ","type":"text"},{"code":"MLNShape","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the straight-line distance from the evaluated object to the given shape.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"mglcoalesce","type":"heading","level":3,"text":"mgl_coalesce:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_coalesce:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_coalesce({x, y, z})"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Returns the first non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value from an array of expressions.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"anchor":"mglattributed","type":"heading","text":"mgl_attributed:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_attributed:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"mgl_attributed({x, y, z})","type":"codeVoice"}]},{"inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"type":"codeVoice","code":"MLNAttributedExpression"},{"type":"text","text":" objects, for use"},{"type":"text","text":" "},{"text":"with the ","type":"text"},{"type":"codeVoice","code":"MLNSymbolStyleLayer.text"},{"text":" property.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"MLNAttributedExpression.attributes"},{"text":" valid attributes.","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Value Type"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontNamesAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" evaluating to an "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" array."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}]}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" evaluating to an ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"text":" value.","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontColorAttribute"}],"type":"paragraph"}],[{"inlineContent":[{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"type":"codeVoice","code":"UIColor"},{"text":" (iOS) or ","type":"text"},{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)."}],"type":"paragraph"}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"text":"MLN_LET","type":"heading","level":3,"anchor":"MLNLET"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"code":"MLN_LET:","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" values, followed by an ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" ","type":"text"},{"text":"that may contain references to those variables.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"text":" ","type":"text"},{"text":"Compared to the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_expressionwithcontext-code","type":"reference","isActive":true},{"type":"text","text":" custom"},{"text":" ","type":"text"},{"type":"text","text":"function, this function takes the variable names and values inline before the"},{"type":"text","text":" "},{"text":"expression that contains references to those variables.","type":"text"}]},{"anchor":"MLNMATCH","text":"MLN_MATCH","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_MATCH:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" An input expression, then any number of argument pairs, followed by a default","type":"text"},{"type":"text","text":" "},{"text":"expression. Each argument pair consists of a constant value followed by an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression to produce as a result of matching that constant value."},{"type":"text","text":" "},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"type":"text","text":" "},{"text":"that aggregate expression result in the following argument. This is shorthand for","type":"text"},{"type":"text","text":" "},{"text":"specifying an argument pair for each of the constant values within that aggregate","type":"text"},{"text":" ","type":"text"},{"text":"expression. It is not possible to match the aggregate expression itself.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"MLN_IF","anchor":"MLNIF","level":3,"type":"heading"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_IF:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Alternating "},{"type":"codeVoice","code":"NSPredicate"},{"text":" conditionals and resulting expressions,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"followed by a default expression."}]},{"inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"type":"text","text":" "},{"type":"text","text":"value. Unlike"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]","type":"codeVoice"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"TERNARY()"},{"text":" syntax, this function can accept multiple “if else” conditions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and is supported on iOS 8."},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":"; however, each conditional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"MLN_FUNCTION","anchor":"MLNFUNCTION"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_FUNCTION:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_FUNCTION('typeof', mystery)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" Any arguments required by the expression operator."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"reference","isActive":true},{"type":"text","text":"."}]},{"level":2,"type":"heading","text":"Custom functions","anchor":"Custom-functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"text":" ","type":"text"},{"code":"+[NSExpression expressionForFunction:selectorName:arguments:]","type":"codeVoice"},{"text":" method or the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"text":" format string syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"type":"text","text":" "},{"text":"classes, but you should not call them directly outside the context of an","type":"text"},{"text":" ","type":"text"},{"text":"expression, because the result may differ from the evaluated expression’s result","type":"text"},{"type":"text","text":" "},{"text":"or may result in undefined behavior.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The MapLibre Style Spec defines some operators for which no custom"},{"type":"text","text":" "},{"text":"function is available. To use these operators in an ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":", call the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_function-code","isActive":true,"type":"reference"},{"type":"text","text":" function with the same arguments"},{"type":"text","text":" "},{"type":"text","text":"that the operator expects."}],"type":"paragraph"},{"type":"heading","text":"boolValue","anchor":"boolValue","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"boolValue","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION(1, 'boolValue')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a number or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" None.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":" when then input is an"},{"type":"text","text":" "},{"type":"text","text":"empty string, 0, "},{"code":"FALSE","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", or "},{"code":"NaN","type":"codeVoice"},{"type":"text","text":", otherwise "},{"type":"codeVoice","code":"TRUE"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"mglhas","level":3,"type":"heading","text":"mgl_has:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"mgl_has:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" "},{"type":"text","text":"or the evaluated object ("},{"code":"SELF","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" "},{"text":"representing the key to look up in the dictionary or the feature attribute to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"look up in the evaluated object (see "},{"type":"codeVoice","code":"MLNFeature.attributes"},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"code":"true","type":"codeVoice"},{"text":" if the dictionary has a value for the key or if the evaluated","type":"text"},{"type":"text","text":" "},{"text":"object has a value for the feature attribute.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"identifier":"#code-mgl_does-have-code","isActive":true,"type":"reference"},{"text":" function, which is used on its own","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without the "},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator. You can also check whether an object has an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"attribute by comparing the key path to "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", for example "},{"type":"codeVoice","code":"cheeseburger != NIL"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"type":"codeVoice","code":"burger.cheese != NIL"}]},{"level":3,"type":"heading","text":"mgl_expressionWithContext:","anchor":"mglexpressionWithContext"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_expressionWithContext:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"type":"text","text":" "},{"text":"a dictionary containing ","type":"text"},{"type":"codeVoice","code":"ios"},{"type":"text","text":" and "},{"type":"codeVoice","code":"macos"},{"text":" keys","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that may contain references to the variables"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" with "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":"s as keys and"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"text":" ","type":"text"},{"type":"text","text":"value is the variable’s value within the target expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"text":" ","type":"text"},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"#code-mgl_let-code"},{"type":"text","text":" function, which is used on its own without the"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"type":"heading","level":3,"anchor":"mglinterpolateWithCurveTypeparametersstops","text":"mgl_interpolateWithCurveType:parameters:stops:"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)","type":"codeVoice"},{"type":"text","text":" "},{"text":"with a dictionary containing zoom levels or other constant values as keys","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"type":"text","text":"variable or key path expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" The first argument is one of the following strings denoting curve types:"},{"text":" ","type":"text"},{"code":"linear","type":"codeVoice"},{"type":"text","text":", "},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"cubic-bezier"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second argument is an expression providing parameters for the curve:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the curve type is ","type":"text"},{"type":"codeVoice","code":"linear"},{"text":", the argument is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"exponential"},{"text":", the argument is an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"text":" ","type":"text"},{"type":"text","text":"exponential interpolation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"cubic-bezier","type":"codeVoice"},{"type":"text","text":", the argument is an"},{"text":" ","type":"text"},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"type":"text","text":" "},{"type":"text","text":"evaluating to a number. The four numbers are control points for the"},{"type":"text","text":" "},{"text":"cubic Bézier curve.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" object representing the"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"text":" ","type":"text"},{"text":"values.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A value interpolated along the continuous mathematical function defined by the"},{"type":"text","text":" "},{"type":"text","text":"arguments, with the target as the input to the function."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"type":"text","text":" "},{"text":"keys may be feature attribute values, zoom levels, or heatmap densities. The","type":"text"},{"type":"text","text":" "},{"text":"values may be constant values or ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" objects. For example, you can","type":"text"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"function, which is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}],"type":"paragraph"},{"text":"mgl_numberWithFallbackValues:","level":3,"type":"heading","anchor":"mglnumberWithFallbackValues"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"floatValue"},{"type":"text","text":", or"},{"text":" ","type":"text"},{"code":"decimalValue","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" Zero or more ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"type":"text","text":" "},{"text":"or string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A numeric representation of the target:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"code":"FALSE","type":"codeVoice"},{"text":", the result is 0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a string, it is converted to a number as specified by the","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"doubleValue"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"floatValue","type":"codeVoice"},{"type":"text","text":", or"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"text":"string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" ","type":"text"},{"text":"Zero or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a Boolean value"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"text":" ","type":"text"},{"text":"“","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","isActive":true,"type":"reference"},{"type":"text","text":"”"},{"text":" ","type":"text"},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If multiple values are provided, each one is evaluated in order until the"},{"text":" ","type":"text"},{"text":"first successful conversion is obtained.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"text":"number by passing the value and the string ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"type":"text","text":" into the "},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"},{"text":"mgl_stepWithMinimum:stops:","anchor":"mglstepWithMinimumstops","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"text":" with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary with zoom levels or other constant values as keys"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"text":" ","type":"text"},{"text":"variable or key path expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"text":" ","type":"text"},{"type":"text","text":"the minimum value in case the target is less than any of the stops in the"},{"type":"text","text":" "},{"type":"text","text":"second argument."}]},{"inlineContent":[{"type":"text","text":"The second argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" object representing the"},{"text":" ","type":"text"},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"text":" ","type":"text"},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The input expression is matched against the keys in the stop dictionary. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"text":" objects. For example, you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"type":"text","text":" "},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"type":"heading","anchor":"stringByAppendingString","text":"stringByAppendingString:"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"stringByAppendingString:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Target:"}]},{"type":"text","text":" "},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a string."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"One or more "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s, each evaluating to a string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target string with each of the argument strings appended in order."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"text":" ","type":"text"},{"text":"method and is similar to the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"#code-mgl_join-code"},{"type":"text","text":" function, which concatenates multiple"},{"type":"text","text":" "},{"type":"text","text":"expressions and is used on its own without the "},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"type":"heading","text":"stringValue","level":3,"anchor":"stringValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"stringValue"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'stringValue')"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"None."}]},{"type":"paragraph","inlineContent":[{"text":"A string representation of the target:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If the target is ","type":"text"},{"type":"text","text":"NIL"},{"text":", the result is the empty string.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If the target is a Boolean value, the result is the string ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a number, it is converted to a string as specified by the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true,"type":"reference"},{"type":"text","text":"”"},{"text":" ","type":"text"},{"type":"text","text":"algorithm of the ECMAScript Language Specification."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a color, it is converted to a string of the form"},{"type":"text","text":" "},{"type":"codeVoice","code":"rgba(r,g,b,a)"},{"type":"text","text":", where "},{"text":"r","type":"text"},{"text":", ","type":"text"},{"text":"g","type":"text"},{"type":"text","text":", and "},{"type":"text","text":"b"},{"type":"text","text":" are"},{"text":" ","type":"text"},{"type":"text","text":"numerals ranging from 0 to 255 and "},{"type":"text","text":"a"},{"text":" ranges from 0 to 1.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"text":" ","type":"text"},{"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"function of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string by passing the value and the string "},{"type":"codeVoice","code":"NSString"},{"text":" into the ","type":"text"},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"metadata":{"title":"Predicates and expressions","role":"article","modules":[{"name":"MapLibre"}],"roleHeading":"Article"},"variants":[{"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"],"traits":[{"interfaceLanguage":"occ"}]}],"kind":"article","identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"abstract":[{"type":"text","text":"Using "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" with MapLibre iOS"}],"seeAlsoSections":[{"generated":true,"title":"Other Articles","identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"]}],"references":{"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"titleInlineContent":[{"text":"kernel density estimation","type":"text"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","title":"kernel density estimation","type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"title":"cos","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","type":"link","titleInlineContent":[{"code":"cos","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"abstract":[{"text":"MapLibre Native for iOS supports custom ","type":"text"},{"code":"Info.plist","type":"codeVoice"},{"text":" keys in your application in order to configure various settings.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","title":"Info.plist Keys","type":"topic","role":"article","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","kind":"article"},"#code-mgl_stepwithminimum-stops-code":{"titleInlineContent":[{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}],"url":"#code-mgl_stepwithminimum-stops-code","title":"mgl_stepWithMinimum:stops:","type":"link","identifier":"#code-mgl_stepwithminimum-stops-code"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","title":"Tile URL Templates","type":"topic","role":"article","url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","kind":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"title":"to-string","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"link","titleInlineContent":[{"code":"to-string","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string"},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"titleInlineContent":[{"code":"coalesce","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","title":"coalesce","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"role":"article","kind":"article","title":"Information for Style Authors","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","url":"\/documentation\/maplibre-native-for-ios\/for_style_authors"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"title":"asin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","type":"link","titleInlineContent":[{"code":"asin","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","title":"lineGradient","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","fragments":[{"text":"lineGradient","kind":"identifier"}],"abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"text":" ","type":"text"},{"text":"effect on lines defined by an ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference"},{"text":" whose ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"option is set to "},{"type":"codeVoice","code":"YES"},{"text":".","type":"text"}]},"#code-stringbyappendingstring-code":{"title":"stringByAppendingString:","identifier":"#code-stringbyappendingstring-code","type":"link","titleInlineContent":[{"code":"stringByAppendingString:","type":"codeVoice"}],"url":"#code-stringbyappendingstring-code"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"abstract":[{"text":"Learn how to work with gesture recognizers","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","title":"User Interactions","type":"topic","role":"article","url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","kind":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"titleInlineContent":[{"code":"format","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","title":"format","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format"},"#code-mgl_let-code":{"title":"MLN_LET","identifier":"#code-mgl_let-code","type":"link","titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"url":"#code-mgl_let-code"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"titleInlineContent":[{"code":"tan","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","title":"tan","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"title":"sin","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"link","titleInlineContent":[{"code":"sin","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"titleInlineContent":[{"code":"atan","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","title":"atan","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"title":"Predicate Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"link","titleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"},"doc://org.swift.MyProject/documentation/MapLibre":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","kind":"symbol","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"url":"\/documentation\/maplibre","role":"collection","type":"topic","title":"MapLibre"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"titleInlineContent":[{"code":"acos","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","title":"acos","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},"https://tc39.github.io/ecma262/#sec-json.stringify":{"title":"JSON.stringify()","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","type":"link","titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"titleInlineContent":[{"text":"NumberToString","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","title":"NumberToString","type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"abstract":[{"text":"Using custom fonts","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","title":"Customizing Fonts","type":"topic","role":"article","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","kind":"article"},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"title":"step","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","type":"link","titleInlineContent":[{"code":"step","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"url":"\/documentation\/maplibre\/mlnshapesource","fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","role":"symbol","kind":"symbol","type":"topic","title":"MLNShapeSource","abstract":[{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true,"type":"reference"},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"text":" ","type":"text"},{"type":"text","text":"shown on the map. The shapes may be instances of "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"or they may be defined by local or external"},{"type":"text","text":" "},{"type":"text","text":"GeoJSON"},{"type":"text","text":" code. A shape source is added to an"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"type":"text","text":" object along with an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle"},{"type":"text","text":" object. The vector style"},{"text":" ","type":"text"},{"text":"layer defines the appearance of any content supplied by the shape source. You","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can update a shape source by setting its "},{"type":"codeVoice","code":"shape"},{"text":" or ","type":"text"},{"code":"URL","type":"codeVoice"},{"type":"text","text":" property."}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"abstract":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"type":"text","text":" object represents a closed shape consisting of four or more"},{"text":" ","type":"text"},{"type":"text","text":"vertices, specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the edges that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use a polygon shape to represent a"},{"text":" ","type":"text"},{"type":"text","text":"building, a lake, or an area you want to highlight."}],"type":"topic","role":"symbol","fragments":[{"text":"MLNPolygon","kind":"identifier"}],"title":"MLNPolygon","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","url":"\/documentation\/maplibre\/mlnpolygon","kind":"symbol"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"titleInlineContent":[{"code":"round","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","title":"round","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"title":"has","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","type":"link","titleInlineContent":[{"code":"has","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has"},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"titleInlineContent":[{"code":"case","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","title":"case","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"title":"distance","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","type":"link","titleInlineContent":[{"code":"distance","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"titleInlineContent":[{"code":"match","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","title":"match","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"title":"+[NSExpression expressionForFunction:arguments:] method","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","type":"link","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"text":" method","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},"https://github.com/maplibre/maplibre-native/issues/331":{"titleInlineContent":[{"text":"#331","type":"text"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","title":"#331","type":"link","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331"},"#code-mgl_match-code":{"title":"MLN_MATCH()","identifier":"#code-mgl_match-code","type":"link","titleInlineContent":[{"code":"MLN_MATCH()","type":"codeVoice"}],"url":"#code-mgl_match-code"},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","title":"ToNumber Applied to the String Type","type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type"},"#MapLibre-specific-functions":{"title":"MapLibre-specific functions","identifier":"#MapLibre-specific-functions","type":"link","titleInlineContent":[{"text":"MapLibre-specific functions","type":"text"}],"url":"#MapLibre-specific-functions"},"#code-mgl_if-code":{"titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"url":"#code-mgl_if-code","title":"MLN_IF()","type":"link","identifier":"#code-mgl_if-code"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"title":"functions predefined","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","type":"link","titleInlineContent":[{"text":"functions predefined","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},"#using-expressions-to-configure-layout-and-paint-attributes":{"titleInlineContent":[{"text":"inside an expression","type":"text"}],"url":"#using-expressions-to-configure-layout-and-paint-attributes","title":"inside an expression","type":"link","identifier":"#using-expressions-to-configure-layout-and-paint-attributes"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"url":"\/documentation\/maplibre\/mlnpolyline","fragments":[{"text":"MLNPolyline","kind":"identifier"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","role":"symbol","title":"MLNPolyline","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference","isActive":true},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the line segments that"},{"type":"text","text":" "},{"text":"connect them. For example, you could use an polyline to represent a road or the","type":"text"},{"type":"text","text":" "},{"text":"path along which something moves.","type":"text"}]},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"title":"NSExpression+MLNAdditions.h","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","type":"link","titleInlineContent":[{"code":"NSExpression+MLNAdditions.h","type":"codeVoice"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h"},"#code-mgl_expressionwithcontext-code":{"titleInlineContent":[{"code":"mgl_expressionWithContext:","type":"codeVoice"}],"url":"#code-mgl_expressionwithcontext-code","title":"mgl_expressionWithContext:","type":"link","identifier":"#code-mgl_expressionwithcontext-code"},"#code-mgl_function-code":{"title":"MLN_FUNCTION()","identifier":"#code-mgl_function-code","type":"link","titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"url":"#code-mgl_function-code"},"#code-mgl_has-code":{"titleInlineContent":[{"code":"mgl_has:","type":"codeVoice"}],"url":"#code-mgl_has-code","title":"mgl_has:","type":"link","identifier":"#code-mgl_has-code"},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"title":"interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","type":"link","titleInlineContent":[{"code":"interpolate","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate"},"#code-mgl_join-code":{"titleInlineContent":[{"code":"mgl_join:","type":"codeVoice"}],"url":"#code-mgl_join-code","title":"mgl_join:","type":"link","identifier":"#code-mgl_join-code"},"#code-mgl_does-have-code":{"title":"mgl_does:have:","identifier":"#code-mgl_does-have-code","type":"link","titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}],"url":"#code-mgl_does-have-code"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"titleInlineContent":[{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}],"url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","title":"mgl_interpolate:withCurveType:parameters:stops:","type":"link","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/":{"title":"MapLibre Style Spec","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","type":"link","titleInlineContent":[{"text":"MapLibre Style Spec","type":"text"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","title":"Adding Multiple Images","type":"topic","role":"article","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","kind":"article"},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"titleInlineContent":[{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}],"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","title":"mgl_interpolateWithCurveType:parameters:stops:","type":"link","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"title":"to-number","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","type":"link","titleInlineContent":[{"code":"to-number","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"titleInlineContent":[{"code":"log2","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","title":"log2","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},"#key-paths":{"title":"key paths","identifier":"#key-paths","type":"link","titleInlineContent":[{"text":"key paths","type":"text"}],"url":"#key-paths"},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"titleInlineContent":[{"code":"concat","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","title":"concat","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},"#variables":{"title":"variables","identifier":"#variables","type":"link","titleInlineContent":[{"text":"variables","type":"text"}],"url":"#variables"},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"titleInlineContent":[{"code":"let","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","title":"let","type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"}}}