{"kind":"article","identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Predicates_and_Expressions","interfaceLanguage":"occ"},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre-native-for-ios\/predicates_and_expressions"]}],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre"]]},"sections":[],"abstract":[{"type":"text","text":"Using "},{"code":"NSPredicate","type":"codeVoice"},{"type":"text","text":" with MapLibre iOS"}],"metadata":{"modules":[{"name":"MapLibre"}],"role":"article","roleHeading":"Article","title":"Predicates and expressions"},"seeAlsoSections":[{"title":"Other Articles","generated":true,"identifiers":["doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Style layers use predicates and expressions to determine what to display and how"},{"type":"text","text":" "},{"text":"to format it. ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Predicates","type":"text"}]},{"type":"text","text":" are represented by the same "},{"code":"NSPredicate","type":"codeVoice"},{"text":" class that","type":"text"},{"text":" ","type":"text"},{"text":"filters results from Core Data or items in an ","type":"text"},{"code":"NSArray","type":"codeVoice"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"type":"text","text":"Predicates are based on "},{"inlineContent":[{"type":"text","text":"expressions"}],"type":"emphasis"},{"type":"text","text":", represented by the "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class."},{"type":"text","text":" "},{"type":"text","text":"Somewhat unusually, style layers also use expressions on their own."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This document discusses the specific subset of the predicate and expression"},{"type":"text","text":" "},{"text":"syntax supported by this SDK. For a more general introduction to predicates and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expressions, consult the"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","type":"reference","isActive":true}]},{"type":"text","text":" "},{"text":"in Apple developer documentation. For additional detail on how this SDK has","type":"text"},{"type":"text","text":" "},{"type":"text","text":"extended the "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" class, see the "},{"type":"reference","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","isActive":true},{"text":" header.","type":"text"}]},{"type":"heading","text":"Using predicates to filter vector data","anchor":"Using-predicates-to-filter-vector-data","level":2},{"type":"paragraph","inlineContent":[{"text":"Most style layer classes display ","type":"text"},{"type":"codeVoice","code":"MLNFeature"},{"type":"text","text":" objects that you can show or hide"},{"type":"text","text":" "},{"type":"text","text":"based on the feature’s attributes. Use the "},{"type":"codeVoice","code":"MLNVectorStyleLayer.predicate"},{"type":"text","text":" "},{"text":"property to include only the features in the source layer that satisfy a","type":"text"},{"type":"text","text":" "},{"text":"condition that you define.","type":"text"}]},{"level":3,"type":"heading","anchor":"Operators","text":"Operators"},{"inlineContent":[{"text":"The following comparison operators are supported:","type":"text"}],"type":"paragraph"},{"rows":[[[{"inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key = value"},{"type":"codeVoice","code":"key == value"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSGreaterThanOrEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"key >= value"},{"type":"codeVoice","code":"key => value"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"NSLessThanOrEqualToPredicateOperatorType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key <= value"},{"type":"codeVoice","code":"key =< value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSGreaterThanPredicateOperatorType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key > value"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSLessThanPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"key < value","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key != value"},{"code":"key <> value","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSBetweenPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"key BETWEEN { 32, 212 }"}]}]]],"type":"table","header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To test whether a feature has or lacks a specific attribute, compare the"},{"type":"text","text":" "},{"text":"attribute to ","type":"text"},{"code":"NULL","type":"codeVoice"},{"type":"text","text":" or "},{"code":"NIL","type":"codeVoice"},{"type":"text","text":". Predicates created using the"},{"text":" ","type":"text"},{"code":"+[NSPredicate predicateWithValue:]","type":"codeVoice"},{"text":" method are also supported. String","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operators and custom operators are not supported."}]},{"inlineContent":[{"type":"text","text":"The following compound operators are supported:"}],"type":"paragraph"},{"header":"row","rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSCompoundPredicateType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSAndPredicateType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 AND predicate2"},{"code":"predicate1 && predicate2","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"NSOrPredicateType","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"predicate1 OR predicate2"},{"type":"text","text":"predicate1 || predicate2"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNotPredicateType"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NOT predicate"},{"code":"!predicate","type":"codeVoice"}]}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"text":"The following aggregate operators are supported:","type":"text"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"code":"NSPredicateOperatorType","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Format string syntax","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSInPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"key IN { 'iOS', 'macOS', 'tvOS', 'watchOS' }","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSContainsPredicateOperatorType"}]}],[{"inlineContent":[{"type":"codeVoice","code":"{ 'iOS', 'macOS', 'tvOS', 'watchOS' } CONTAINS key"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"IN"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CONTAINS"},{"type":"text","text":" operators to test whether a value appears in a collection, whether a string is a substring of a larger string, or whether the evaluated feature ("},{"type":"codeVoice","code":"SELF"},{"text":") lies within a given ","type":"text"},{"type":"codeVoice","code":"MLNShape"},{"text":" or ","type":"text"},{"code":"MLNFeature","type":"codeVoice"},{"type":"text","text":". For example, to show one delicious local chain of sandwich shops, but not similarly named steakhouses and pizzerias:"}]},{"syntax":"objc","type":"codeListing","code":["MLNPolygon *cincinnati = [MLNPolygon polygonWithCoordinates:cincinnatiCoordinates count:sizeof(cincinnatiCoordinates) \/ sizeof(cincinnatiCoordinates[0])];","deliLayer.predicate = [NSPredicate predicateWithFormat:@\"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati];"]},{"code":["let cincinnati = MLNPolygon(coordinates: &cincinnatiCoordinates, count: UInt(cincinnatiCoordinates.count))","deliLayer.predicate = NSPredicate(format: \"class = 'food_and_drink' AND name CONTAINS 'Izzy' AND SELF IN %@\", cincinnati)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following combinations of comparison operators and modifiers are supported:"}]},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"code":"NSComparisonPredicateModifier","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSPredicateOperatorType"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSAllPredicateModifier"}]}],[{"type":"paragraph","inlineContent":[{"code":"NSNotEqualToPredicateOperatorType","type":"codeVoice"}]}],[{"inlineContent":[{"code":"ALL haystack != needle","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSAnyPredicateModifier"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSEqualToPredicateOperatorType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ANY haystack = needle"},{"type":"codeVoice","code":"SOME haystack = needle"}]}]]]},{"type":"paragraph","inlineContent":[{"text":"The following comparison predicate options are supported for comparison and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"aggregate operators that are used in the predicate:"}]},{"rows":[[[{"inlineContent":[{"type":"codeVoice","code":"NSComparisonPredicateOptions"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Format string syntax","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSCaseInsensitivePredicateOption"}]}],[{"inlineContent":[{"type":"codeVoice","code":"'QUEBEC' =[c] 'Quebec'"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSDiacriticInsensitivePredicateOption"}]}],[{"inlineContent":[{"type":"codeVoice","code":"'Québec' =[d] 'Quebec'"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"inlineContent":[{"text":"Other comparison predicate options are unsupported, namely ","type":"text"},{"type":"codeVoice","code":"l"},{"type":"text","text":" "},{"type":"text","text":"(for locale sensitivity) and "},{"code":"n","type":"codeVoice"},{"type":"text","text":" (for normalization). A comparison is"},{"text":" ","type":"text"},{"type":"text","text":"locale-sensitive as long as it is case- or diacritic-insensitive. Comparison"},{"type":"text","text":" "},{"type":"text","text":"predicate options are not supported in conjunction with comparison modifiers"},{"type":"text","text":" "},{"type":"text","text":"like "},{"code":"ALL","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ANY"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"text":"Operands","type":"heading","anchor":"Operands"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operands in predicates can be "},{"isActive":true,"type":"reference","identifier":"#variables"},{"type":"text","text":", "},{"identifier":"#key-paths","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or almost anything else that can appear","type":"text"},{"type":"text","text":" "},{"identifier":"#using-expressions-to-configure-layout-and-paint-attributes","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Automatic type casting is not performed. Therefore, a feature only matches a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate if its value for the attribute in question is of the same type as the"},{"text":" ","type":"text"},{"text":"value specified in the predicate. Use the ","type":"text"},{"type":"codeVoice","code":"CAST()"},{"text":" operator to convert a key","type":"text"},{"type":"text","text":" "},{"text":"path or variable into a matching type:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast a value to a number, use ","type":"text"},{"type":"codeVoice","code":"CAST(key, 'NSNumber')"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cast a value to a string, use "},{"type":"codeVoice","code":"CAST(key, 'NSString')"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"To cast a value to a color, use "},{"code":"CAST(key, 'UIColor')","type":"codeVoice"},{"type":"text","text":" on iOS and "},{"type":"codeVoice","code":"CAST(key, 'NSColor')"},{"type":"text","text":" on macOS."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"To cast an ","type":"text"},{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"UIColor"},{"type":"text","text":" object to an array, use "},{"code":"CAST(noindex(color), 'NSArray')","type":"codeVoice"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For details about the predicate format string syntax, consult the “Predicate"},{"type":"text","text":" "},{"type":"text","text":"Format String Syntax” chapter of the"},{"type":"text","text":" "},{"inlineContent":[{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}],"overridingTitle":"Predicate Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"in Apple developer documentation.","type":"text"}]},{"anchor":"Using-expressions-to-configure-layout-and-paint-attributes","type":"heading","text":"Using expressions to configure layout and paint attributes","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression can contain subexpressions of various types. Each of the supported"},{"text":" ","type":"text"},{"type":"text","text":"types of expressions is discussed below."}]},{"anchor":"Constant-values","level":3,"text":"Constant values","type":"heading"},{"inlineContent":[{"type":"text","text":"A constant value can be of any of the following types:"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C"}]}],[{"type":"paragraph","inlineContent":[{"text":"In Swift","type":"text"}]}]],[[{"inlineContent":[{"code":"NSColor","type":"codeVoice"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"text":" (iOS)","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"NSColor"},{"type":"text","text":" (macOS)"},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"NSString","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSString"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSNumber.boolValue"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"NSNumber.boolValue","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSNumber.doubleValue"}]}],[{"inlineContent":[{"code":"NSNumber.doubleValue","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSArray<NSNumber>"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"[Float]","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"NSArray<NSString>","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[String]"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"NSValue.CGVectorValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue"},{"type":"text","text":" containing "},{"type":"codeVoice","code":"CGVector"},{"text":" (macOS)","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.cgVectorValue"},{"text":" (iOS)","type":"text"},{"code":"NSValue","type":"codeVoice"},{"type":"text","text":" containing "},{"code":"CGVector","type":"codeVoice"},{"type":"text","text":" (macOS)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.UIEdgeInsetsValue"},{"type":"text","text":" (iOS)"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"type":"text","text":" (macOS)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NSValue.uiEdgeInsetsValue"},{"text":" (iOS)","type":"text"},{"type":"codeVoice","code":"NSValue.edgeInsetsValue"},{"text":" (macOS)","type":"text"}]}]]],"type":"table","header":"row"},{"inlineContent":[{"type":"text","text":"For literal floating-point values, use "},{"code":"-[NSNumber numberWithDouble:]","type":"codeVoice"},{"type":"text","text":" instead"},{"text":" ","type":"text"},{"text":"of ","type":"text"},{"code":"-[NSNumber numberWithFloat:]","type":"codeVoice"},{"type":"text","text":" to avoid precision issues."}],"type":"paragraph"},{"level":3,"text":"Key paths","type":"heading","anchor":"Key-paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path expression refers to an attribute of the "},{"code":"MLNFeature","type":"codeVoice"},{"text":" object being","type":"text"},{"type":"text","text":" "},{"text":"evaluated for display. For example, if a polygon’s ","type":"text"},{"type":"codeVoice","code":"MLNFeature.attributes"},{"text":" ","type":"text"},{"type":"text","text":"dictionary contains the "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" key, then the key path "},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" refers"},{"text":" ","type":"text"},{"text":"to the value of the ","type":"text"},{"type":"codeVoice","code":"floorCount"},{"type":"text","text":" attribute when evaluating that particular"},{"text":" ","type":"text"},{"text":"polygon.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following special attributes are also available on features that are produced"},{"text":" ","type":"text"},{"text":"as a result of clustering multiple point features together in a shape source:","type":"text"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attribute"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Meaning"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"cluster"}]}],[{"inlineContent":[{"type":"text","text":"Bool"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"True if the feature is a point cluster. If the attribute is false (or not present) then the  feature should not be considered a cluster."}]}]],[[{"inlineContent":[{"text":"cluster_id","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Identifier for the point cluster."}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"point_count"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"type":"text","text":"The number of point features in a given cluster."}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"Some characters may not be used directly as part of a key path in a format","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string. For example, if a feature’s attribute is named "},{"code":"ISO 3166-1:2006","type":"codeVoice"},{"type":"text","text":", an"},{"text":" ","type":"text"},{"type":"text","text":"expression format string of "},{"type":"codeVoice","code":"lowercase(ISO 3166-1:2006)"},{"text":" or a predicate format","type":"text"},{"type":"text","text":" "},{"text":"string of ","type":"text"},{"type":"codeVoice","code":"ISO 3166-1:2006 == 'US-OH'"},{"type":"text","text":" would raise an exception. Instead, use a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"%K"},{"text":" placeholder or the ","type":"text"},{"code":"+[NSExpression expressionForKeyPath:]","type":"codeVoice"},{"type":"text","text":" initializer:"}]},{"type":"codeListing","syntax":"objc","code":["[NSPredicate predicateWithFormat:@\"%K == 'US-OH'\", @\"ISO 3166-1:2006\"];","[NSExpression expressionForFunction:@\"lowercase:\"","                          arguments:@[[NSExpression expressionForKeyPath:@\"ISO 3166-1:2006\"]]]"]},{"type":"codeListing","code":["NSPredicate(format: \"%K == 'US-OH'\", \"ISO 3166-1:2006\")","NSExpression(forFunction: \"lowercase:\",","             arguments: [NSExpression(forKeyPath: \"ISO 3166-1:2006\")])"],"syntax":"swift"},{"anchor":"Functions","type":"heading","text":"Functions","level":3},{"inlineContent":[{"type":"text","text":"Of the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion"},{"text":" ","type":"text"},{"text":"by the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the following subset is supported in layer attribute values:"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"inlineContent":[{"type":"text","text":"Format string syntax"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"average:"}]}],[{"type":"paragraph","inlineContent":[{"code":"average({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"sum:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sum({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"count:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"count({1, 2, 2, 3, 4, 7, 9})"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"min:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"min({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"max:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"max({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"add:to:"}]}],[{"inlineContent":[{"code":"1 + 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"from:subtract:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"2 - 1"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"multiply:by:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"1 * 2"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"divide:by:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1 \/ 2"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"modulus:by:","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"modulus:by:(1, 2)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"sqrt:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sqrt(2)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"log:"}]}],[{"type":"paragraph","inlineContent":[{"code":"log(10)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"ln:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"ln(2)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"raise:toPower:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"2 ** 2","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"exp:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"exp(0)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ceiling:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"ceiling(0.99999)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"abs:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"abs(-1)"}]}]],[[{"inlineContent":[{"code":"trunc:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"trunc(6378.1370)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"floor:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"floor(-0.99999)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"uppercase:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"uppercase('Elysian Fields')","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"lowercase:"}]}],[{"type":"paragraph","inlineContent":[{"code":"lowercase('DOWNTOWN')","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"noindex:"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"noindex(0 + 2 + c)"}]}]],[[{"inlineContent":[{"code":"length:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"length('Wapakoneta')"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"castObject:toType:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"CAST(ele, 'NSString')"},{"code":"CAST(ele, 'NSNumber')","type":"codeVoice"}],"type":"paragraph"}]]],"type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A number of "},{"identifier":"#MapLibre-specific-functions","type":"reference","isActive":true},{"type":"text","text":" are also"},{"text":" ","type":"text"},{"type":"text","text":"available."}]},{"type":"paragraph","inlineContent":[{"text":"The following predefined functions are ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" supported:"}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializer parameter"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Format string syntax"}]}]],[[{"inlineContent":[{"code":"median:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"code":"median({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"mode:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mode({1, 2, 2, 3, 4, 7, 9})"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"stddev:","type":"codeVoice"}]}],[{"inlineContent":[{"code":"stddev({1, 2, 2, 3, 4, 7, 9})","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"random"}]}],[{"inlineContent":[{"type":"codeVoice","code":"random()"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"randomn(10)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"now()"}]}]],[[{"inlineContent":[{"code":"bitwiseAnd:with:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseAnd:with:(5, 3)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseOr:with:(5, 3)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"bitwiseXor:with:","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"bitwiseXor:with:(5, 3)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leftshift:by:"}]}],[{"inlineContent":[{"type":"codeVoice","code":"leftshift:by:(23, 1)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"rightshift:by:(23, 1)"}]}]],[[{"inlineContent":[{"code":"onesComplement:","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"onesComplement(255)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"distanceToLocation:fromLocation:","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"distanceToLocation:fromLocation:(there, here)"}],"type":"paragraph"}]]],"header":"row"},{"type":"heading","anchor":"Conditionals","text":"Conditionals","level":3},{"type":"paragraph","inlineContent":[{"text":"Conditionals are supported via the built-in","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"text":" ","type":"text"},{"text":"method and ","type":"text"},{"type":"codeVoice","code":"TERNARY()"},{"text":" operator. If you need to express multiple cases","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(“else-if”), you can either nest a conditional within a conditional or use the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_if-code","isActive":true},{"type":"text","text":" or "},{"identifier":"#code-mgl_match-code","isActive":true,"type":"reference"},{"text":" function.","type":"text"}]},{"anchor":"Aggregates","type":"heading","level":3,"text":"Aggregates"},{"inlineContent":[{"type":"text","text":"Aggregate expressions can contain arrays of expressions. In some cases, it is"},{"type":"text","text":" "},{"text":"possible to use the array itself instead of wrapping the array in an aggregate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression."}],"type":"paragraph"},{"anchor":"Variables","type":"heading","level":3,"text":"Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following variables are defined by this SDK for use with style layers:"}]},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Variable","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Meaning","type":"text"}]}]],[[{"inlineContent":[{"code":"$featureIdentifier","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Any GeoJSON data type","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"A value that uniquely identifies the feature in the containing source. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.featureIdentifierVariableExpression"},{"type":"text","text":" property."}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"$geometryType"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}],[{"type":"paragraph","inlineContent":[{"text":"The type of geometry represented by the feature. A feature’s type is one of the following strings:","type":"text"},{"text":"*   ","type":"text"},{"type":"codeVoice","code":"Point"},{"text":" for point features, corresponding to the ","type":"text"},{"type":"codeVoice","code":"MLNPointAnnotation"},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"LineString"},{"type":"text","text":" for polyline features, corresponding to the "},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","type":"reference","isActive":true},{"type":"text","text":" class"},{"type":"text","text":"*   "},{"type":"codeVoice","code":"Polygon"},{"type":"text","text":" for polygon features, corresponding to the "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","isActive":true},{"text":" class","type":"text"},{"type":"text","text":"This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.geometryTypeVariableExpression"},{"text":" property.","type":"text"}]}]],[[{"inlineContent":[{"code":"$heatmapDensity","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Number","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation"},{"text":" of a screen point in a heatmap layer; in other words, a relative measure of how many data points are crowded around a particular pixel. This variable can only be used with the ","type":"text"},{"type":"codeVoice","code":"heatmapColor"},{"text":" property. This variable corresponds to the ","type":"text"},{"type":"codeVoice","code":"NSExpression.heatmapDensityVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$zoomLevel"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Number","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"The current zoom level. In style layout and paint properties, this variable may only appear as the target of a top-level interpolation or step expression. This variable corresponds to the "},{"type":"codeVoice","code":"NSExpression.zoomLevelVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"$lineProgress"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Number"}]}],[{"inlineContent":[{"text":"A number that indicates the relative distance along a line at a given point along the line. This variable evaluates to 0 at the beginning of the line and 1 at the end of the line. It can only be used with the ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","isActive":true,"type":"reference"},{"type":"text","text":" property. It corresponds to the "},{"type":"codeVoice","code":"NSExpression.lineProgressVariableExpression"},{"type":"text","text":" property."}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"text":"In addition to these variables, you can define your own variables and refer to","type":"text"},{"type":"text","text":" "},{"text":"them elsewhere in the expression. The syntax for defining a variable makes use","type":"text"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"type":"reference","overridingTitleInlineContent":[{"text":"MapLibre-specific function","type":"text"}],"overridingTitle":"MapLibre-specific function","isActive":true,"identifier":"#MapLibre-specific-functions"},{"text":" that takes an","type":"text"},{"text":" ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" as an argument:","type":"text"}]},{"syntax":"objc","type":"codeListing","code":["[NSExpression expressionWithFormat:@\"MLN_LET('floorCount', 2, $floorCount + 1)\"];"]},{"type":"codeListing","syntax":"swift","code":["NSExpression(format: \"MLN_LET(floorCount, 2, $floorCount + 1)\")"]},{"level":2,"anchor":"MapLibre-specific-functions","text":"MapLibre-specific functions","type":"heading"},{"name":"Warning","type":"aside","style":"warning","content":[{"inlineContent":[{"type":"text","text":"Due to a change in iOS 15.5, some of these stopped working. See "},{"identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","type":"reference","isActive":true},{"type":"text","text":" for more information and workarounds."}],"type":"paragraph"}]},{"inlineContent":[{"text":"For compatibility with the MapLibre Style Spec, the following functions","type":"text"},{"type":"text","text":" "},{"text":"are defined by this SDK. When setting a style layer property, you can call these","type":"text"},{"type":"text","text":" "},{"text":"functions just like the predefined functions above, using either the","type":"text"},{"type":"text","text":" "},{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method or a convenient format"},{"type":"text","text":" "},{"text":"string syntax:","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"mgl_does:have:","anchor":"mgldoeshave"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_does:have:(SELF, '🧀🍔')"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"mgl_does:have:(%@, '🧀🍔')"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns a Boolean value indicating whether the dictionary has a value for the"},{"type":"text","text":" "},{"type":"text","text":"key or whether the evaluated object ("},{"code":"SELF","type":"codeVoice"},{"type":"text","text":") has a value for the feature"},{"text":" ","type":"text"},{"type":"text","text":"attribute. Compared to the "},{"isActive":true,"identifier":"#code-mgl_has-code","type":"reference"},{"text":" custom function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that function’s target is instead passed in as the first argument to this"},{"text":" ","type":"text"},{"type":"text","text":"function. Both functions are equivalent to the syntax "},{"code":"key != NIL","type":"codeVoice"},{"text":" or","type":"text"},{"type":"text","text":" "},{"code":"%@[key] != NIL","type":"codeVoice"},{"text":" but can be used outside of a predicate.","type":"text"}]},{"text":"mgl_interpolate:withCurveType:parameters:stops:","type":"heading","anchor":"mglinterpolatewithCurveTypeparametersstops","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_interpolate:withCurveType:parameters:stops:(x, 'linear', nil, %@)"}]},{"inlineContent":[{"text":"Produces continuous, smooth results by interpolating between pairs of input and","type":"text"},{"text":" ","type":"text"},{"text":"output values (“stops”). Compared to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","isActive":true},{"type":"text","text":" "},{"type":"text","text":"custom function, the input expression (that function’s target) is instead passed"},{"text":" ","type":"text"},{"type":"text","text":"in as the first argument to this function."}],"type":"paragraph"},{"level":3,"text":"mgl_step:from:stops:","type":"heading","anchor":"mglstepfromstops"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_step:from:stops:"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_step:from:stops:(x, 11, %@)","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Produces discrete, stepped results by evaluating a piecewise-constant function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"defined by pairs of input and output values (“stops”). Compared to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_stepwithminimum-stops-code"},{"text":" custom","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function, the input expression (that function’s target) is instead passed in as"},{"type":"text","text":" "},{"type":"text","text":"the first argument to this function."}]},{"type":"heading","text":"mgl_join:","anchor":"mgljoin","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_join:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_join({'Old', 'MacDonald'})"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the result of concatenating together all the elements of an array in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"order. Compared to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-stringbyappendingstring-code","isActive":true},{"text":" custom","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function, this function takes only one argument, which is an aggregate"},{"text":" ","type":"text"},{"type":"text","text":"expression containing the strings to concatenate."}]},{"anchor":"mglacos","text":"mgl_acos:","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_acos:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_acos(1)"}]},{"type":"paragraph","inlineContent":[{"text":"Returns the arccosine of the number.","type":"text"}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","level":3,"text":"mgl_asin:","anchor":"mglasin"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_asin:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"mgl_asin(0)","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"Returns the arcsine of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"type":"heading","text":"mgl_atan:","anchor":"mglatan"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_atan:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_atan(20)"}]},{"inlineContent":[{"text":"Returns the arctangent of the number.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"type":"heading","text":"mgl_cos:","anchor":"mglcos"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_cos:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_cos(0)"}]},{"inlineContent":[{"type":"text","text":"Returns the cosine of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","level":3,"text":"mgl_log2:","anchor":"mgllog2"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_log2:","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"mgl_log2(1024)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the base-2 logarithm of the number."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"text":"mgl_round:","anchor":"mglround","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_round:"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_round(1.5)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the number rounded to the nearest integer. If the number is halfway"},{"text":" ","type":"text"},{"type":"text","text":"between two integers, this function rounds it away from zero."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"level":3,"type":"heading","anchor":"mglsin","text":"mgl_sin:"},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_sin:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_sin(0)"}]},{"inlineContent":[{"text":"Returns the sine of the number.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"mgltan","text":"mgl_tan:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_tan:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_tan(0)"}]},{"inlineContent":[{"type":"text","text":"Returns the tangent of the number."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec.","type":"text"}],"type":"paragraph"},{"text":"mgl_distanceFrom:","type":"heading","level":3,"anchor":"mgldistanceFrom"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_distanceFrom:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"code":"mgl_distanceFrom(%@)","type":"codeVoice"},{"text":" with an ","type":"text"},{"code":"MLNShape","type":"codeVoice"}]},{"inlineContent":[{"type":"text","text":"Returns the straight-line distance from the evaluated object to the given shape."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"level":3,"text":"mgl_coalesce:","type":"heading","anchor":"mglcoalesce"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_coalesce:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"mgl_coalesce({x, y, z})","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Returns the first non-"},{"code":"nil","type":"codeVoice"},{"text":" value from an array of expressions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"level":3,"text":"mgl_attributed:","type":"heading","anchor":"mglattributed"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"code":"mgl_attributed:","type":"codeVoice"}]},{"inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_attributed({x, y, z})"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Concatenates and returns the array of ","type":"text"},{"code":"MLNAttributedExpression","type":"codeVoice"},{"text":" objects, for use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"MLNSymbolStyleLayer.text"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"code":"MLNAttributedExpression.attributes","type":"codeVoice"},{"type":"text","text":" valid attributes."}]},{"rows":[[[{"inlineContent":[{"type":"text","text":"Key"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Value Type"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MLNFontNamesAttribute"}]}],[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" array."}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"MLNFontScaleAttribute"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"text":" evaluating to an ","type":"text"},{"code":"NSNumber","type":"codeVoice"},{"type":"text","text":" value."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"MLNFontColorAttribute","type":"codeVoice"}]}],[{"inlineContent":[{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" evaluating to an "},{"code":"UIColor","type":"codeVoice"},{"type":"text","text":" (iOS) or "},{"code":"NSColor","type":"codeVoice"},{"text":" (macOS).","type":"text"}],"type":"paragraph"}]]],"header":"row","type":"table"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"MLNLET","text":"MLN_LET","type":"heading","level":3},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"MLN_LET:","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_LET('age', uppercase('old'), 'name', uppercase('MacDonald'), mgl_join({$age, $name}))"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" Any number of variable names interspersed with their assigned"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":" values, followed by an ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"that may contain references to those variables."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of evaluating an expression with the given variable values."},{"type":"text","text":" "},{"text":"Compared to the","type":"text"},{"text":" ","type":"text"},{"identifier":"#code-mgl_expressionwithcontext-code","isActive":true,"type":"reference"},{"text":" custom","type":"text"},{"text":" ","type":"text"},{"text":"function, this function takes the variable names and values inline before the","type":"text"},{"type":"text","text":" "},{"text":"expression that contains references to those variables.","type":"text"}]},{"anchor":"MLNMATCH","level":3,"type":"heading","text":"MLN_MATCH"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"type":"text","text":" "},{"code":"MLN_MATCH:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"type":"text","text":" "},{"code":"MLN_MATCH(x, 0, 'zero match', 1, 'one match', 2, 'two match', 'default')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" An input expression, then any number of argument pairs, followed by a default"},{"type":"text","text":" "},{"text":"expression. Each argument pair consists of a constant value followed by an","type":"text"},{"text":" ","type":"text"},{"text":"expression to produce as a result of matching that constant value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the input value is an aggregate expression, then any of the constant values within"},{"text":" ","type":"text"},{"type":"text","text":"that aggregate expression result in the following argument. This is shorthand for"},{"type":"text","text":" "},{"type":"text","text":"specifying an argument pair for each of the constant values within that aggregate"},{"text":" ","type":"text"},{"type":"text","text":"expression. It is not possible to match the aggregate expression itself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the result of matching the input expression against the given constant"},{"text":" ","type":"text"},{"type":"text","text":"values."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForMatchingExpression:inDictionary:defaultExpression:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}]},{"anchor":"MLNIF","type":"heading","text":"MLN_IF","level":3},{"inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"MLN_IF:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"code":"MLN_IF(1 = 2, YES, 2 = 2, YES, NO)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Alternating ","type":"text"},{"type":"codeVoice","code":"NSPredicate"},{"text":" conditionals and resulting expressions,","type":"text"},{"text":" ","type":"text"},{"text":"followed by a default expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns the first expression that meets the condition; otherwise, the default"},{"text":" ","type":"text"},{"text":"value. Unlike","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForConditional:trueExpression:falseExpression:]"},{"type":"text","text":" or"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"TERNARY()","type":"codeVoice"},{"type":"text","text":" syntax, this function can accept multiple “if else” conditions"},{"text":" ","type":"text"},{"type":"text","text":"and is supported on iOS 8."},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"type":"text","text":" and macOS 10.10."},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"text":"; however, each conditional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed into this function must be wrapped in a constant expression."}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForConditional:trueExpression:falseExpresssion:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case"},{"text":" ","type":"text"},{"type":"text","text":"operator in the MapLibre Style Spec."}],"type":"paragraph"},{"text":"MLN_FUNCTION","level":3,"anchor":"MLNFUNCTION","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"code":"MLN_FUNCTION:","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"MLN_FUNCTION('typeof', mystery)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"text":" Any arguments required by the expression operator.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression exactly as defined by the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","isActive":true},{"text":".","type":"text"}]},{"level":2,"anchor":"Custom-functions","type":"heading","text":"Custom functions"},{"inlineContent":[{"type":"text","text":"The following custom functions are also available with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression expressionForFunction:selectorName:arguments:]"},{"text":" method or the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" format string syntax."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Some of these functions are defined as methods on their respective target"},{"type":"text","text":" "},{"text":"classes, but you should not call them directly outside the context of an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expression, because the result may differ from the evaluated expression’s result"},{"type":"text","text":" "},{"text":"or may result in undefined behavior.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The MapLibre Style Spec defines some operators for which no custom","type":"text"},{"type":"text","text":" "},{"text":"function is available. To use these operators in an ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":", call the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"#code-mgl_function-code"},{"type":"text","text":" function with the same arguments"},{"type":"text","text":" "},{"type":"text","text":"that the operator expects."}],"type":"paragraph"},{"level":3,"anchor":"boolValue","type":"heading","text":"boolValue"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Selector:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"boolValue","type":"codeVoice"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(1, 'boolValue')"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number or string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"type":"text","text":" None."}]},{"inlineContent":[{"type":"text","text":"A Boolean representation of the target: "},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":" when then input is an"},{"text":" ","type":"text"},{"text":"empty string, 0, ","type":"text"},{"code":"FALSE","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"NIL"},{"text":", or ","type":"text"},{"code":"NaN","type":"codeVoice"},{"text":", otherwise ","type":"text"},{"code":"TRUE","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"mgl_has:","type":"heading","anchor":"mglhas","level":3},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_has:"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($featureAttributes, 'mgl_has:', '🧀🍔')"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to an "},{"type":"codeVoice","code":"NSDictionary"},{"type":"text","text":" "},{"type":"text","text":"or the evaluated object ("},{"type":"codeVoice","code":"SELF"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" An ","type":"text"},{"type":"codeVoice","code":"NSExpression"},{"text":" that evaluates to an ","type":"text"},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" "},{"text":"representing the key to look up in the dictionary or the feature attribute to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"look up in the evaluated object (see "},{"code":"MLNFeature.attributes","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"code":"true","type":"codeVoice"},{"text":" if the dictionary has a value for the key or if the evaluated","type":"text"},{"text":" ","type":"text"},{"text":"object has a value for the feature attribute.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"#code-mgl_does-have-code","isActive":true},{"text":" function, which is used on its own","type":"text"},{"text":" ","type":"text"},{"text":"without the ","type":"text"},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator. You can also check whether an object has an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"attribute by comparing the key path to "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":", for example "},{"code":"cheeseburger != NIL","type":"codeVoice"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"codeVoice","code":"burger.cheese != NIL"}],"type":"paragraph"},{"anchor":"mglexpressionWithContext","level":3,"type":"heading","text":"mgl_expressionWithContext:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Selector:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_expressionWithContext:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($ios + $macos, 'mgl_expressionWithContext:', %@)"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary containing "},{"code":"ios","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"macos"},{"type":"text","text":" keys"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that may contain references to the variables"},{"text":" ","type":"text"},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"text":" An ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"type":"text","text":" with "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":"s as keys and"},{"text":" ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":"s as values. Each key is a variable name and each"},{"text":" ","type":"text"},{"text":"value is the variable’s value within the target expression.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The target expression with variable subexpressions replaced with the values"},{"type":"text","text":" "},{"type":"text","text":"defined in the context dictionary."}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let"},{"text":" ","type":"text"},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"identifier":"#code-mgl_let-code","isActive":true,"type":"reference"},{"type":"text","text":" function, which is used on its own without the"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION()"},{"type":"text","text":" operator."}]},{"anchor":"mglinterpolateWithCurveTypeparametersstops","level":3,"text":"mgl_interpolateWithCurveType:parameters:stops:","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_interpolateWithCurveType:parameters:stops:"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Format string syntax:","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_interpolateWithCurveType:parameters:stops:', 'linear', NIL, %@)"},{"text":" ","type":"text"},{"type":"text","text":"with a dictionary containing zoom levels or other constant values as keys"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Target:","type":"text"}],"type":"strong"},{"type":"text","text":" An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a number and contains a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable or key path expression."}]},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" The first argument is one of the following strings denoting curve types:","type":"text"},{"type":"text","text":" "},{"code":"linear","type":"codeVoice"},{"text":", ","type":"text"},{"code":"exponential","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"cubic-bezier"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second argument is an expression providing parameters for the curve:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"linear"},{"text":", the argument is ","type":"text"},{"code":"NIL","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"type":"codeVoice","code":"exponential"},{"text":", the argument is an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expression that evaluates to a number, specifying the base of the"},{"type":"text","text":" "},{"text":"exponential interpolation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the curve type is "},{"code":"cubic-bezier","type":"codeVoice"},{"text":", the argument is an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"array or aggregate expression containing four expressions, each"},{"type":"text","text":" "},{"text":"evaluating to a number. The four numbers are control points for the","type":"text"},{"type":"text","text":" "},{"text":"cubic Bézier curve.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The third argument is an ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" object representing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"text":"values.","type":"text"}]},{"inlineContent":[{"text":"A value interpolated along the continuous mathematical function defined by the","type":"text"},{"type":"text","text":" "},{"text":"arguments, with the target as the input to the function.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"text":" objects. For example, you can","type":"text"},{"type":"text","text":" "},{"text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors","type":"text"},{"type":"text","text":" "},{"text":"yellow, orange, and red as the values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function corresponds to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"+[NSExpression(MLNAdditions) mgl_expressionForInterpolatingExpression:withCurveType:parameters:stops:]"},{"type":"text","text":" "},{"type":"text","text":"method and the"},{"type":"text","text":" "},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. See also the"},{"text":" ","type":"text"},{"type":"reference","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","isActive":true},{"type":"text","text":" "},{"text":"function, which is used on its own without the ","type":"text"},{"code":"FUNCTION()","type":"codeVoice"},{"type":"text","text":" operator."}]},{"level":3,"type":"heading","anchor":"mglnumberWithFallbackValues","text":"mgl_numberWithFallbackValues:"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"mgl_numberWithFallbackValues:","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"type":"text","text":" "},{"code":"decimalValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Format string syntax:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"type":"text","text":" "},{"type":"text","text":"string."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Arguments:"}],"type":"strong"},{"text":" Zero or more ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or string."}]},{"inlineContent":[{"text":"A numeric representation of the target:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is "},{"type":"codeVoice","code":"NIL"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FALSE"},{"text":", the result is 0.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the target is true, the result is 1.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"mgl_numberWithFallbackValues:"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"doubleValue"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"floatValue","type":"codeVoice"},{"text":", or","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decimalValue"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION(ele, 'mgl_numberWithFallbackValues:', 0)"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"code":"NSExpression","type":"codeVoice"},{"type":"text","text":" that evaluates to a Boolean value, number, or"},{"text":" ","type":"text"},{"type":"text","text":"string."}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Arguments:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"Zero or more "},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a Boolean value","type":"text"},{"text":" ","type":"text"},{"text":"or string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A numeric representation of the target:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is ","type":"text"},{"type":"codeVoice","code":"NIL"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"FALSE"},{"type":"text","text":", the result is 0."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is true, the result is 1."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the target is a string, it is converted to a number as specified by the"},{"type":"text","text":" "},{"type":"text","text":"“"},{"isActive":true,"identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","type":"reference"},{"type":"text","text":"”"},{"text":" ","type":"text"},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If multiple values are provided, each one is evaluated in order until the","type":"text"},{"type":"text","text":" "},{"text":"first successful conversion is obtained.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"inlineContent":[{"text":"This function corresponds to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","isActive":true},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. You can also cast a value to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"number by passing the value and the string "},{"code":"NSNumber","type":"codeVoice"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"CAST()"},{"type":"text","text":" "},{"text":"operator.","type":"text"}],"type":"paragraph"},{"anchor":"mglstepWithMinimumstops","type":"heading","level":3,"text":"mgl_stepWithMinimum:stops:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"mgl_stepWithMinimum:stops:"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FUNCTION($zoomLevel, 'mgl_stepWithMinimum:stops:', 0, %@)"},{"text":" with","type":"text"},{"text":" ","type":"text"},{"text":"a dictionary with zoom levels or other constant values as keys","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" that evaluates to a number and contains a"},{"type":"text","text":" "},{"text":"variable or key path expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"The first argument is an expression that evaluates to a number, specifying"},{"type":"text","text":" "},{"text":"the minimum value in case the target is less than any of the stops in the","type":"text"},{"text":" ","type":"text"},{"text":"second argument.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second argument is an "},{"code":"NSDictionary","type":"codeVoice"},{"text":" object representing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"interpolation’s stops, with numeric zoom levels as keys and expressions as"},{"type":"text","text":" "},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output value of the stop whose key is just less than the evaluated target,"},{"text":" ","type":"text"},{"text":"or the minimum value if the target is less than the least of the stops’ keys.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input expression is matched against the keys in the stop dictionary. The"},{"text":" ","type":"text"},{"type":"text","text":"keys may be feature attribute values, zoom levels, or heatmap densities. The"},{"type":"text","text":" "},{"type":"text","text":"values may be constant values or "},{"type":"codeVoice","code":"NSExpression"},{"type":"text","text":" objects. For example, you can"},{"text":" ","type":"text"},{"type":"text","text":"use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors"},{"text":" ","type":"text"},{"type":"text","text":"yellow, orange, and red as the values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"code":"+[NSExpression(MLNAdditions) mgl_expressionForSteppingExpression:fromExpression:stops:]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method and the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec.","type":"text"}]},{"anchor":"stringByAppendingString","type":"heading","level":3,"text":"stringByAppendingString:"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Selector:"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"stringByAppendingString:"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Format string syntax:"}]},{"text":" ","type":"text"},{"code":"FUNCTION('Old', 'stringByAppendingString:', 'MacDonald')","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Target:","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a string.","type":"text"}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arguments:"}]},{"type":"text","text":" "},{"type":"text","text":"One or more "},{"type":"codeVoice","code":"NSExpression"},{"text":"s, each evaluating to a string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The target string with each of the argument strings appended in order."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-[NSExpression(MLNAdditions) mgl_expressionByAppendingExpression:]"},{"text":" ","type":"text"},{"text":"method and is similar to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat"},{"type":"text","text":" "},{"text":"operator in the MapLibre Style Spec. See also the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"#code-mgl_join-code","type":"reference"},{"text":" function, which concatenates multiple","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expressions and is used on its own without the "},{"type":"codeVoice","code":"FUNCTION()"},{"text":" operator.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"stringValue","anchor":"stringValue"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Selector:"}]},{"text":" ","type":"text"},{"code":"stringValue","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Format string syntax:"}],"type":"strong"},{"type":"text","text":" "},{"type":"codeVoice","code":"FUNCTION(ele, 'stringValue')"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Target:"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"NSExpression","type":"codeVoice"},{"text":" that evaluates to a Boolean value, number, or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arguments:","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"None."}]},{"inlineContent":[{"type":"text","text":"A string representation of the target:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the target is "},{"type":"text","text":"NIL"},{"type":"text","text":", the result is the empty string."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a Boolean value, the result is the string "},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the target is a number, it is converted to a string as specified by the"},{"text":" ","type":"text"},{"type":"text","text":"“"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","isActive":true},{"type":"text","text":"”"},{"type":"text","text":" "},{"text":"algorithm of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the target is a color, it is converted to a string of the form","type":"text"},{"text":" ","type":"text"},{"code":"rgba(r,g,b,a)","type":"codeVoice"},{"type":"text","text":", where "},{"type":"text","text":"r"},{"text":", ","type":"text"},{"type":"text","text":"g"},{"text":", and ","type":"text"},{"text":"b","type":"text"},{"type":"text","text":" are"},{"type":"text","text":" "},{"text":"numerals ranging from 0 to 255 and ","type":"text"},{"type":"text","text":"a"},{"text":" ranges from 0 to 1.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Otherwise, the target is converted to a string in the format specified by the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","isActive":true},{"type":"text","text":" "},{"text":"function of the ECMAScript Language Specification.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"This function corresponds to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator in the MapLibre Style Spec. You can also cast a value to a"},{"type":"text","text":" "},{"text":"string by passing the value and the string ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" into the "},{"code":"CAST()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"operator."}],"type":"paragraph"}]}],"references":{"https://en.wikipedia.org/wiki/Kernel_density_estimation":{"type":"link","titleInlineContent":[{"text":"kernel density estimation","type":"text"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","identifier":"https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation","title":"kernel density estimation"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Tile_URL_Templates":{"url":"\/documentation\/maplibre-native-for-ios\/tile_url_templates","abstract":[{"text":"Using URL Templates when defining tile sources","type":"text"}],"title":"Tile URL Templates","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Tile_URL_Templates","type":"topic"},"#code-mgl_stepwithminimum-stops-code":{"type":"link","identifier":"#code-mgl_stepwithminimum-stops-code","title":"mgl_stepWithMinimum:stops:","url":"#code-mgl_stepwithminimum-stops-code","titleInlineContent":[{"code":"mgl_stepWithMinimum:stops:","type":"codeVoice"}]},"#key-paths":{"type":"link","titleInlineContent":[{"text":"key paths","type":"text"}],"url":"#key-paths","identifier":"#key-paths","title":"key paths"},"#code-mgl_has-code":{"type":"link","identifier":"#code-mgl_has-code","title":"mgl_has:","url":"#code-mgl_has-code","titleInlineContent":[{"code":"mgl_has:","type":"codeVoice"}]},"https://maplibre.org/maplibre-style-spec/expressions/#concat":{"type":"link","titleInlineContent":[{"code":"concat","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#concat","title":"concat"},"#code-mgl_join-code":{"type":"link","identifier":"#code-mgl_join-code","title":"mgl_join:","url":"#code-mgl_join-code","titleInlineContent":[{"code":"mgl_join:","type":"codeVoice"}]},"#code-stringbyappendingstring-code":{"type":"link","titleInlineContent":[{"code":"stringByAppendingString:","type":"codeVoice"}],"url":"#code-stringbyappendingstring-code","identifier":"#code-stringbyappendingstring-code","title":"stringByAppendingString:"},"https://maplibre.org/maplibre-style-spec/expressions/#round":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","title":"round","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#round","titleInlineContent":[{"code":"round","type":"codeVoice"}]},"#variables":{"type":"link","titleInlineContent":[{"text":"variables","type":"text"}],"url":"#variables","identifier":"#variables","title":"variables"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-string":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","title":"to-string","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-string","titleInlineContent":[{"code":"to-string","type":"codeVoice"}]},"https://maplibre.org/maplibre-style-spec/expressions/#interpolate":{"type":"link","titleInlineContent":[{"code":"interpolate","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#interpolate","title":"interpolate"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/MultipleImagesExample":{"role":"article","url":"\/documentation\/maplibre-native-for-ios\/multipleimagesexample","kind":"article","abstract":[{"text":"Adding images to the map and assigning them to POI types","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/MultipleImagesExample","title":"Adding Multiple Images","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#acos":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","title":"acos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#acos","titleInlineContent":[{"code":"acos","type":"codeVoice"}]},"#code-mgl_if-code":{"type":"link","titleInlineContent":[{"code":"MLN_IF()","type":"codeVoice"}],"url":"#code-mgl_if-code","identifier":"#code-mgl_if-code","title":"MLN_IF()"},"https://maplibre.org/maplibre-style-spec/expressions/#cos":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","title":"cos","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#cos","titleInlineContent":[{"code":"cos","type":"codeVoice"}]},"#code-mgl_expressionwithcontext-code":{"type":"link","titleInlineContent":[{"code":"mgl_expressionWithContext:","type":"codeVoice"}],"url":"#code-mgl_expressionwithcontext-code","identifier":"#code-mgl_expressionwithcontext-code","title":"mgl_expressionWithContext:"},"https://maplibre.org/maplibre-style-spec/expressions/#distance":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","title":"distance","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#distance","titleInlineContent":[{"code":"distance","type":"codeVoice"}]},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init#discussion":{"type":"link","titleInlineContent":[{"text":"functions predefined","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init#discussion","title":"functions predefined"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/GestureRecognizers":{"abstract":[{"text":"Learn how to work with gesture recognizers","type":"text"}],"url":"\/documentation\/maplibre-native-for-ios\/gesturerecognizers","title":"User Interactions","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/GestureRecognizers","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#tan":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","title":"tan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#tan","titleInlineContent":[{"code":"tan","type":"codeVoice"}]},"https://maplibre.org/maplibre-style-spec/expressions/#match":{"type":"link","titleInlineContent":[{"code":"match","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#match","title":"match"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html":{"type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","title":"Predicate Programming Guide","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/Predicates\/AdditionalChapters\/Introduction.html","titleInlineContent":[{"text":"Predicate Programming Guide","type":"text"}]},"https://tc39.github.io/ecma262/#sec-json.stringify":{"type":"link","titleInlineContent":[{"code":"JSON.stringify()","type":"codeVoice"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-json.stringify","title":"JSON.stringify()"},"#code-mgl_does-have-code":{"type":"link","identifier":"#code-mgl_does-have-code","title":"mgl_does:have:","url":"#code-mgl_does-have-code","titleInlineContent":[{"code":"mgl_does:have:","type":"codeVoice"}]},"#code-mgl_function-code":{"type":"link","titleInlineContent":[{"code":"MLN_FUNCTION()","type":"codeVoice"}],"url":"#code-mgl_function-code","identifier":"#code-mgl_function-code","title":"MLN_FUNCTION()"},"doc://org.swift.MyProject/documentation/MapLibre":{"kind":"symbol","role":"collection","title":"MapLibre","type":"topic","abstract":[{"text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","url":"\/documentation\/maplibre"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/For_Style_Authors":{"abstract":[],"url":"\/documentation\/maplibre-native-for-ios\/for_style_authors","title":"Information for Style Authors","role":"article","kind":"article","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/For_Style_Authors","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#has":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","title":"has","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#has","titleInlineContent":[{"code":"has","type":"codeVoice"}]},"#code-mgl_interpolatewithcurvetype-parameters-stops-code":{"type":"link","titleInlineContent":[{"code":"mgl_interpolateWithCurveType:parameters:stops:","type":"codeVoice"}],"url":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","identifier":"#code-mgl_interpolatewithcurvetype-parameters-stops-code","title":"mgl_interpolateWithCurveType:parameters:stops:"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Info.plist_Keys":{"role":"article","url":"\/documentation\/maplibre-native-for-ios\/info.plist_keys","kind":"article","abstract":[{"type":"text","text":"MapLibre Native for iOS supports custom "},{"code":"Info.plist","type":"codeVoice"},{"type":"text","text":" keys in your application in order to configure various settings."}],"title":"Info.plist Keys","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Info.plist_Keys","type":"topic"},"doc://org.swift.MyProject/documentation/MapLibre-Native-for-iOS/Customizing_Fonts":{"kind":"article","abstract":[{"type":"text","text":"Using custom fonts"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre-Native-for-iOS\/Customizing_Fonts","title":"Customizing Fonts","role":"article","url":"\/documentation\/maplibre-native-for-ios\/customizing_fonts","type":"topic"},"https://maplibre.org/maplibre-style-spec/expressions/#atan":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","title":"atan","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#atan","titleInlineContent":[{"code":"atan","type":"codeVoice"}]},"https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type":{"type":"link","titleInlineContent":[{"text":"ToNumber Applied to the String Type","type":"text"}],"url":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tonumber-applied-to-the-string-type","title":"ToNumber Applied to the String Type"},"https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type":{"type":"link","identifier":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","title":"NumberToString","url":"https:\/\/tc39.github.io\/ecma262\/#sec-tostring-applied-to-the-number-type","titleInlineContent":[{"text":"NumberToString","type":"text"}]},"https://maplibre.org/maplibre-style-spec/expressions/#step":{"type":"link","titleInlineContent":[{"code":"step","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#step","title":"step"},"https://developer.apple.com/documentation/foundation/nsexpression/1413747-init":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","title":"+[NSExpression expressionForFunction:arguments:] method","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nsexpression\/1413747-init","titleInlineContent":[{"code":"+[NSExpression expressionForFunction:arguments:]","type":"codeVoice"},{"type":"text","text":" method"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolygon":{"type":"topic","abstract":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","type":"reference","isActive":true},{"text":" object represents a closed shape consisting of four or more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"vertices, specified as "},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the edges that"},{"type":"text","text":" "},{"text":"connect them. For example, you could use a polygon shape to represent a","type":"text"},{"text":" ","type":"text"},{"text":"building, a lake, or an area you want to highlight.","type":"text"}],"fragments":[{"kind":"identifier","text":"MLNPolygon"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolygon","title":"MLNPolygon","kind":"symbol","role":"symbol","url":"\/documentation\/maplibre\/mlnpolygon"},"https://maplibre.org/maplibre-style-spec/expressions/":{"type":"link","titleInlineContent":[{"text":"MapLibre Style Spec","type":"text"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/","title":"MapLibre Style Spec"},"https://maplibre.org/maplibre-style-spec/expressions/#types-to-number":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","title":"to-number","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-to-number","titleInlineContent":[{"code":"to-number","type":"codeVoice"}]},"https://maplibre.org/maplibre-style-spec/expressions/#coalesce":{"type":"link","titleInlineContent":[{"code":"coalesce","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#coalesce","title":"coalesce"},"https://maplibre.org/maplibre-style-spec/expressions/#log2":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","title":"log2","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#log2","titleInlineContent":[{"code":"log2","type":"codeVoice"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNLineStyleLayer/lineGradient":{"role":"symbol","url":"\/documentation\/maplibre\/mlnlinestylelayer\/linegradient","kind":"symbol","abstract":[{"type":"text","text":"The color gradient with which the line will be drawn. This property only has an"},{"type":"text","text":" "},{"text":"effect on lines defined by an ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"reference"},{"text":" whose ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource"},{"type":"text","text":" "},{"type":"text","text":"option is set to "},{"code":"YES","type":"codeVoice"},{"type":"text","text":"."}],"title":"lineGradient","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNLineStyleLayer\/lineGradient","type":"topic","fragments":[{"kind":"identifier","text":"lineGradient"}]},"#code-mgl_let-code":{"type":"link","titleInlineContent":[{"code":"MLN_LET","type":"codeVoice"}],"url":"#code-mgl_let-code","identifier":"#code-mgl_let-code","title":"MLN_LET"},"https://maplibre.org/maplibre-style-spec/expressions/#sin":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","title":"sin","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#sin","titleInlineContent":[{"code":"sin","type":"codeVoice"}]},"#MapLibre-specific-functions":{"type":"link","titleInlineContent":[{"text":"MapLibre-specific functions","type":"text"}],"url":"#MapLibre-specific-functions","identifier":"#MapLibre-specific-functions","title":"MapLibre-specific functions"},"#using-expressions-to-configure-layout-and-paint-attributes":{"type":"link","identifier":"#using-expressions-to-configure-layout-and-paint-attributes","title":"inside an expression","url":"#using-expressions-to-configure-layout-and-paint-attributes","titleInlineContent":[{"text":"inside an expression","type":"text"}]},"https://maplibre.org/maplibre-style-spec/expressions/#types-format":{"type":"link","titleInlineContent":[{"code":"format","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#types-format","title":"format"},"doc://org.swift.MyProject/documentation/MapLibre/MLNPolyline":{"type":"topic","abstract":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","isActive":true},{"text":" object represents a shape consisting of two or more vertices,","type":"text"},{"text":" ","type":"text"},{"text":"specified as ","type":"text"},{"type":"codeVoice","code":"CLLocationCoordinate2D"},{"type":"text","text":" instances, and the line segments that"},{"type":"text","text":" "},{"type":"text","text":"connect them. For example, you could use an polyline to represent a road or the"},{"text":" ","type":"text"},{"type":"text","text":"path along which something moves."}],"fragments":[{"kind":"identifier","text":"MLNPolyline"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNPolyline","title":"MLNPolyline","kind":"symbol","role":"symbol","url":"\/documentation\/maplibre\/mlnpolyline"},"#code-mgl_match-code":{"type":"link","identifier":"#code-mgl_match-code","title":"MLN_MATCH()","url":"#code-mgl_match-code","titleInlineContent":[{"code":"MLN_MATCH()","type":"codeVoice"}]},"https://maplibre.org/maplibre-style-spec/expressions/#case":{"type":"link","titleInlineContent":[{"code":"case","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#case","title":"case"},"https://maplibre.org/maplibre-style-spec/expressions/#asin":{"type":"link","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","title":"asin","url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#asin","titleInlineContent":[{"code":"asin","type":"codeVoice"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNShapeSource":{"role":"symbol","abstract":[{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","isActive":true},{"type":"text","text":" is a map content source that supplies vector shapes to be"},{"type":"text","text":" "},{"text":"shown on the map. The shapes may be instances of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","type":"reference"},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShape","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"or they may be defined by local or external","type":"text"},{"type":"text","text":" "},{"type":"text","text":"GeoJSON"},{"text":" code. A shape source is added to an","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true,"type":"reference"},{"type":"text","text":" object along with an "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNStyle","isActive":true},{"type":"text","text":" object. The vector style"},{"text":" ","type":"text"},{"text":"layer defines the appearance of any content supplied by the shape source. You","type":"text"},{"type":"text","text":" "},{"text":"can update a shape source by setting its ","type":"text"},{"code":"shape","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URL"},{"text":" property.","type":"text"}],"fragments":[{"text":"MLNShapeSource","kind":"identifier"}],"title":"MLNShapeSource","url":"\/documentation\/maplibre\/mlnshapesource","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNShapeSource","type":"topic","kind":"symbol"},"https://github.com/maplibre/maplibre-native/issues/331":{"type":"link","titleInlineContent":[{"text":"#331","type":"text"}],"url":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/issues\/331","title":"#331"},"#code-mgl_interpolate-withcurvetype-parameters-stops-code":{"type":"link","identifier":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","title":"mgl_interpolate:withCurveType:parameters:stops:","url":"#code-mgl_interpolate-withcurvetype-parameters-stops-code","titleInlineContent":[{"code":"mgl_interpolate:withCurveType:parameters:stops:","type":"codeVoice"}]},"https://maplibre.org/maplibre-style-spec/expressions/#let":{"type":"link","titleInlineContent":[{"code":"let","type":"codeVoice"}],"url":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","identifier":"https:\/\/maplibre.org\/maplibre-style-spec\/expressions\/#let","title":"let"},"https://github.com/maplibre/maplibre-native/blob/main/platform/darwin/src/NSExpression%2BMLNAdditions.h":{"type":"link","identifier":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","title":"NSExpression+MLNAdditions.h","url":"https:\/\/github.com\/maplibre\/maplibre-native\/blob\/main\/platform\/darwin\/src\/NSExpression%2BMLNAdditions.h","titleInlineContent":[{"code":"NSExpression+MLNAdditions.h","type":"codeVoice"}]}}}