{"metadata":{"role":"symbol","roleHeading":"Instance Method","externalID":"c:objc(cs)MLNMapView(im)camera:fittingCoordinateBounds:edgePadding:","title":"camera:fittingCoordinateBounds:edgePadding:","modules":[{"name":"MapLibre"}],"symbolKind":"method","fragments":[{"kind":"text","text":"- "},{"text":"camera:fittingCoordinateBounds:edgePadding:","kind":"identifier"}],"navigatorTitle":[{"text":"camera:fittingCoordinateBounds:edgePadding:","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre","doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView"]]},"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Returns the camera that best fits the given coordinate bounds with some","type":"text"},{"type":"text","text":" "},{"type":"text","text":"additional padding on each side, matching an existing camera as much as"},{"type":"text","text":" "},{"text":"possible.","type":"text"}],"identifier":{"interfaceLanguage":"occ","url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView\/camera:fittingCoordinateBounds:edgePadding:"},"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"tokens":[{"text":"- (","kind":"text"},{"text":"MLNMapCamera","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapCamera","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)MLNMapCamera"},{"text":" *) ","kind":"text"},{"kind":"identifier","text":"camera:"},{"kind":"text","text":"("},{"text":"MLNMapCamera","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapCamera","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)MLNMapCamera"},{"text":" *) ","kind":"text"},{"text":"camera","kind":"internalParam"},{"text":" ","kind":"text"},{"text":"fittingCoordinateBounds:","kind":"identifier"},{"kind":"text","text":"("},{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNCoordinateBounds","text":"MLNCoordinateBounds","kind":"typeIdentifier","preciseIdentifier":"c:@S@MLNCoordinateBounds"},{"text":") ","kind":"text"},{"kind":"internalParam","text":"bounds"},{"text":" ","kind":"text"},{"text":"edgePadding:","kind":"identifier"},{"text":"(","kind":"text"},{"text":"UIEdgeInsets","preciseIdentifier":"c:@S@UIEdgeInsets","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"internalParam","text":"insets"},{"text":";","kind":"text"}],"languages":["occ"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The camera that the return camera should adhere to. All values"},{"text":" ","type":"text"},{"text":"on this camera will be manipulated except for pitch and direction.","type":"text"}],"type":"paragraph"}],"name":"camera"},{"name":"bounds","content":[{"inlineContent":[{"type":"text","text":"The coordinate bounds to fit to the receiver’s viewport."}],"type":"paragraph"}]},{"name":"insets","content":[{"type":"paragraph","inlineContent":[{"text":"The minimum padding (in screen points) that would be visible","type":"text"},{"text":" ","type":"text"},{"text":"around the returned camera object if it were set as the receiver’s camera.","type":"text"}]}]}]},{"content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A camera object centered on the same location as the coordinate bounds","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with zoom level as high (close to the ground) as possible while still"},{"type":"text","text":" "},{"text":"including the entire coordinate bounds. The initial camera’s pitch and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"direction will be honored."}]}],"kind":"content"},{"content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The behavior of this method is undefined if called in response to"},{"type":"text","text":" "},{"code":"UIApplicationWillTerminateNotification","type":"codeVoice"},{"text":"; you may receive a ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" return value"},{"text":" ","type":"text"},{"type":"text","text":"depending on the order of notification delivery."}]}],"name":"Note"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/maplibre\/mlnmapview\/camera:fittingcoordinatebounds:edgepadding:"],"traits":[{"interfaceLanguage":"occ"}]}],"references":{"doc://org.swift.MyProject/documentation/MapLibre/MLNMapCamera":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapCamera","abstract":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapCamera","isActive":true},{"type":"text","text":" object represents a viewpoint from which the user observes"},{"text":" ","type":"text"},{"text":"some point on an ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","type":"reference"},{"type":"text","text":"."}],"role":"symbol","title":"MLNMapCamera","fragments":[{"kind":"identifier","text":"MLNMapCamera"}],"kind":"symbol","url":"\/documentation\/maplibre\/mlnmapcamera","type":"topic"},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapView":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView","abstract":[{"text":"An interactive, customizable map view with an interface similar to the one","type":"text"},{"text":" ","type":"text"},{"text":"provided by Apple’s MapKit.","type":"text"}],"type":"topic","title":"MLNMapView","role":"symbol","kind":"symbol","url":"\/documentation\/maplibre\/mlnmapview","fragments":[{"kind":"identifier","text":"MLNMapView"}]},"doc://org.swift.MyProject/documentation/MapLibre":{"type":"topic","role":"collection","kind":"symbol","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","url":"\/documentation\/maplibre","abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"title":"MapLibre"},"doc://org.swift.MyProject/documentation/MapLibre/MLNCoordinateBounds":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNCoordinateBounds","title":"MLNCoordinateBounds","type":"topic","abstract":[{"text":"A rectangular area as measured on a two-dimensional map projection.","type":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/maplibre\/mlncoordinatebounds","fragments":[{"text":"MLNCoordinateBounds","kind":"identifier"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNMapView/camera:fittingCoordinateBounds:edgePadding:":{"kind":"symbol","url":"\/documentation\/maplibre\/mlnmapview\/camera:fittingcoordinatebounds:edgepadding:","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"camera:fittingCoordinateBounds:edgePadding:"}],"title":"camera:fittingCoordinateBounds:edgePadding:","fragments":[{"text":"- ","kind":"text"},{"text":"camera:fittingCoordinateBounds:edgePadding:","kind":"identifier"}],"type":"topic","abstract":[{"text":"Returns the camera that best fits the given coordinate bounds with some","type":"text"},{"type":"text","text":" "},{"type":"text","text":"additional padding on each side, matching an existing camera as much as"},{"type":"text","text":" "},{"text":"possible.","type":"text"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNMapView\/camera:fittingCoordinateBounds:edgePadding:"}}}