{"metadata":{"externalID":"c:objc(cs)MLNOfflineStorage(im)invalidateAmbientCacheWithCompletionHandler:","roleHeading":"Instance Method","title":"invalidateAmbientCacheWithCompletionHandler:","modules":[{"name":"MapLibre"}],"navigatorTitle":[{"text":"invalidateAmbientCacheWithCompletionHandler:","kind":"identifier"}],"role":"symbol","fragments":[{"text":"- ","kind":"text"},{"text":"invalidateAmbientCacheWithCompletionHandler:","kind":"identifier"}],"symbolKind":"method"},"kind":"symbol","identifier":{"url":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/invalidateAmbientCacheWithCompletionHandler:","interfaceLanguage":"occ"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Invalidates the ambient cache. This method checks that the tiles in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ambient cache match those from the server. If the local tiles do not match"},{"type":"text","text":" "},{"text":"those on the server, they are re-downloaded.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.MyProject\/documentation\/MapLibre","doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage"]]},"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"languages":["occ"],"tokens":[{"text":"- (","kind":"text"},{"text":"void","kind":"typeIdentifier","preciseIdentifier":"c:v"},{"text":") ","kind":"text"},{"kind":"identifier","text":"invalidateAmbientCacheWithCompletionHandler:"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"void","preciseIdentifier":"c:v"},{"text":" (^","kind":"text"},{"kind":"text","text":")("},{"text":"NSError","preciseIdentifier":"c:objc(cs)NSError","kind":"typeIdentifier"},{"text":" * ","kind":"text"},{"text":"error","kind":"internalParam"},{"kind":"text","text":")) "},{"text":"completion","kind":"internalParam"},{"text":";","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"name":"completion","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The completion handler to call once the ambient cache has"},{"type":"text","text":" "},{"text":"been revalidated. This handler is executed asynchronously on the main queue.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"This is recommended over clearing the cache or resetting the database","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because valid local tiles will not be downloaded again."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Resources shared with offline packs will not be affected by this method.","type":"text"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/maplibre\/mlnofflinestorage\/invalidateambientcachewithcompletionhandler:"]}],"references":{"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage/invalidateAmbientCacheWithCompletionHandler:":{"title":"invalidateAmbientCacheWithCompletionHandler:","url":"\/documentation\/maplibre\/mlnofflinestorage\/invalidateambientcachewithcompletionhandler:","kind":"symbol","type":"topic","navigatorTitle":[{"text":"invalidateAmbientCacheWithCompletionHandler:","kind":"identifier"}],"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage\/invalidateAmbientCacheWithCompletionHandler:","abstract":[{"type":"text","text":"Invalidates the ambient cache. This method checks that the tiles in the"},{"type":"text","text":" "},{"type":"text","text":"ambient cache match those from the server. If the local tiles do not match"},{"text":" ","type":"text"},{"type":"text","text":"those on the server, they are re-downloaded."}],"role":"symbol","fragments":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"invalidateAmbientCacheWithCompletionHandler:"}]},"doc://org.swift.MyProject/documentation/MapLibre/MLNOfflineStorage":{"identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre\/MLNOfflineStorage","abstract":[{"type":"text","text":"MLNOfflineStorage implements a singleton (shared object) that manages offline"},{"type":"text","text":" "},{"type":"text","text":"packs and ambient caching. All of this classâ€™s instance methods are asynchronous,"},{"type":"text","text":" "},{"text":"reflecting the fact that offline resources are stored in a database. The shared","type":"text"},{"type":"text","text":" "},{"text":"object maintains a canonical collection of offline packs in its ","type":"text"},{"type":"codeVoice","code":"packs"},{"text":" property.","type":"text"}],"type":"topic","kind":"symbol","title":"MLNOfflineStorage","url":"\/documentation\/maplibre\/mlnofflinestorage","role":"symbol","fragments":[{"text":"MLNOfflineStorage","kind":"identifier"}]},"doc://org.swift.MyProject/documentation/MapLibre":{"abstract":[{"type":"text","text":"Powerful, free and open-source mapping toolkit with full control over data sources and styling."}],"title":"MapLibre","url":"\/documentation\/maplibre","identifier":"doc:\/\/org.swift.MyProject\/documentation\/MapLibre","role":"collection","type":"topic","kind":"symbol"}}}